{"version":3,"file":"codemirror_language-_XiX6II0.js","sources":["../node_modules/@lezer/common/dist/index.js","../node_modules/@lezer/highlight/dist/index.js","../node_modules/@codemirror/language/dist/index.js"],"sourcesContent":["/**\nThe default maximum length of a `TreeBuffer` node.\n*/\nconst DefaultBufferLength = 1024;\nlet nextPropID = 0;\nclass Range {\n    constructor(from, to) {\n        this.from = from;\n        this.to = to;\n    }\n}\n/**\nEach [node type](#common.NodeType) or [individual tree](#common.Tree)\ncan have metadata associated with it in props. Instances of this\nclass represent prop names.\n*/\nclass NodeProp {\n    /**\n    Create a new node prop type.\n    */\n    constructor(config = {}) {\n        this.id = nextPropID++;\n        this.perNode = !!config.perNode;\n        this.deserialize = config.deserialize || (() => {\n            throw new Error(\"This node type doesn't define a deserialize function\");\n        });\n    }\n    /**\n    This is meant to be used with\n    [`NodeSet.extend`](#common.NodeSet.extend) or\n    [`LRParser.configure`](#lr.ParserConfig.props) to compute\n    prop values for each node type in the set. Takes a [match\n    object](#common.NodeType^match) or function that returns undefined\n    if the node type doesn't get this prop, and the prop's value if\n    it does.\n    */\n    add(match) {\n        if (this.perNode)\n            throw new RangeError(\"Can't add per-node props to node types\");\n        if (typeof match != \"function\")\n            match = NodeType.match(match);\n        return (type) => {\n            let result = match(type);\n            return result === undefined ? null : [this, result];\n        };\n    }\n}\n/**\nProp that is used to describe matching delimiters. For opening\ndelimiters, this holds an array of node names (written as a\nspace-separated string when declaring this prop in a grammar)\nfor the node types of closing delimiters that match it.\n*/\nNodeProp.closedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/**\nThe inverse of [`closedBy`](#common.NodeProp^closedBy). This is\nattached to closing delimiters, holding an array of node names\nof types of matching opening delimiters.\n*/\nNodeProp.openedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/**\nUsed to assign node types to groups (for example, all node\ntypes that represent an expression could be tagged with an\n`\"Expression\"` group).\n*/\nNodeProp.group = new NodeProp({ deserialize: str => str.split(\" \") });\n/**\nAttached to nodes to indicate these should be\n[displayed](https://codemirror.net/docs/ref/#language.syntaxTree)\nin a bidirectional text isolate, so that direction-neutral\ncharacters on their sides don't incorrectly get associated with\nsurrounding text. You'll generally want to set this for nodes\nthat contain arbitrary text, like strings and comments, and for\nnodes that appear _inside_ arbitrary text, like HTML tags. When\nnot given a value, in a grammar declaration, defaults to\n`\"auto\"`.\n*/\nNodeProp.isolate = new NodeProp({ deserialize: value => {\n        if (value && value != \"rtl\" && value != \"ltr\" && value != \"auto\")\n            throw new RangeError(\"Invalid value for isolate: \" + value);\n        return value || \"auto\";\n    } });\n/**\nThe hash of the [context](#lr.ContextTracker.constructor)\nthat the node was parsed in, if any. Used to limit reuse of\ncontextual nodes.\n*/\nNodeProp.contextHash = new NodeProp({ perNode: true });\n/**\nThe distance beyond the end of the node that the tokenizer\nlooked ahead for any of the tokens inside the node. (The LR\nparser only stores this when it is larger than 25, for\nefficiency reasons.)\n*/\nNodeProp.lookAhead = new NodeProp({ perNode: true });\n/**\nThis per-node prop is used to replace a given node, or part of a\nnode, with another tree. This is useful to include trees from\ndifferent languages in mixed-language parsers.\n*/\nNodeProp.mounted = new NodeProp({ perNode: true });\n/**\nA mounted tree, which can be [stored](#common.NodeProp^mounted) on\na tree node to indicate that parts of its content are\nrepresented by another tree.\n*/\nclass MountedTree {\n    constructor(\n    /**\n    The inner tree.\n    */\n    tree, \n    /**\n    If this is null, this tree replaces the entire node (it will\n    be included in the regular iteration instead of its host\n    node). If not, only the given ranges are considered to be\n    covered by this tree. This is used for trees that are mixed in\n    a way that isn't strictly hierarchical. Such mounted trees are\n    only entered by [`resolveInner`](#common.Tree.resolveInner)\n    and [`enter`](#common.SyntaxNode.enter).\n    */\n    overlay, \n    /**\n    The parser used to create this subtree.\n    */\n    parser) {\n        this.tree = tree;\n        this.overlay = overlay;\n        this.parser = parser;\n    }\n    /**\n    @internal\n    */\n    static get(tree) {\n        return tree && tree.props && tree.props[NodeProp.mounted.id];\n    }\n}\nconst noProps = Object.create(null);\n/**\nEach node in a syntax tree has a node type associated with it.\n*/\nclass NodeType {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The name of the node type. Not necessarily unique, but if the\n    grammar was written properly, different node types with the\n    same name within a node set should play the same semantic\n    role.\n    */\n    name, \n    /**\n    @internal\n    */\n    props, \n    /**\n    The id of this node in its set. Corresponds to the term ids\n    used in the parser.\n    */\n    id, \n    /**\n    @internal\n    */\n    flags = 0) {\n        this.name = name;\n        this.props = props;\n        this.id = id;\n        this.flags = flags;\n    }\n    /**\n    Define a node type.\n    */\n    static define(spec) {\n        let props = spec.props && spec.props.length ? Object.create(null) : noProps;\n        let flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) |\n            (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);\n        let type = new NodeType(spec.name || \"\", props, spec.id, flags);\n        if (spec.props)\n            for (let src of spec.props) {\n                if (!Array.isArray(src))\n                    src = src(type);\n                if (src) {\n                    if (src[0].perNode)\n                        throw new RangeError(\"Can't store a per-node prop on a node type\");\n                    props[src[0].id] = src[1];\n                }\n            }\n        return type;\n    }\n    /**\n    Retrieves a node prop for this type. Will return `undefined` if\n    the prop isn't present on this node.\n    */\n    prop(prop) { return this.props[prop.id]; }\n    /**\n    True when this is the top node of a grammar.\n    */\n    get isTop() { return (this.flags & 1 /* NodeFlag.Top */) > 0; }\n    /**\n    True when this node is produced by a skip rule.\n    */\n    get isSkipped() { return (this.flags & 2 /* NodeFlag.Skipped */) > 0; }\n    /**\n    Indicates whether this is an error node.\n    */\n    get isError() { return (this.flags & 4 /* NodeFlag.Error */) > 0; }\n    /**\n    When true, this node type doesn't correspond to a user-declared\n    named node, for example because it is used to cache repetition.\n    */\n    get isAnonymous() { return (this.flags & 8 /* NodeFlag.Anonymous */) > 0; }\n    /**\n    Returns true when this node's name or one of its\n    [groups](#common.NodeProp^group) matches the given string.\n    */\n    is(name) {\n        if (typeof name == 'string') {\n            if (this.name == name)\n                return true;\n            let group = this.prop(NodeProp.group);\n            return group ? group.indexOf(name) > -1 : false;\n        }\n        return this.id == name;\n    }\n    /**\n    Create a function from node types to arbitrary values by\n    specifying an object whose property names are node or\n    [group](#common.NodeProp^group) names. Often useful with\n    [`NodeProp.add`](#common.NodeProp.add). You can put multiple\n    names, separated by spaces, in a single property name to map\n    multiple node names to a single value.\n    */\n    static match(map) {\n        let direct = Object.create(null);\n        for (let prop in map)\n            for (let name of prop.split(\" \"))\n                direct[name] = map[prop];\n        return (node) => {\n            for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\n                let found = direct[i < 0 ? node.name : groups[i]];\n                if (found)\n                    return found;\n            }\n        };\n    }\n}\n/**\nAn empty dummy node type to use when no actual type is available.\n*/\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);\n/**\nA node set holds a collection of node types. It is used to\ncompactly represent trees by storing their type ids, rather than a\nfull pointer to the type object, in a numeric array. Each parser\n[has](#lr.LRParser.nodeSet) a node set, and [tree\nbuffers](#common.TreeBuffer) can only store collections of nodes\nfrom the same set. A set can have a maximum of 2**16 (65536) node\ntypes in it, so that the ids fit into 16-bit typed array slots.\n*/\nclass NodeSet {\n    /**\n    Create a set with the given types. The `id` property of each\n    type should correspond to its position within the array.\n    */\n    constructor(\n    /**\n    The node types in this set, by id.\n    */\n    types) {\n        this.types = types;\n        for (let i = 0; i < types.length; i++)\n            if (types[i].id != i)\n                throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n    }\n    /**\n    Create a copy of this set with some node properties added. The\n    arguments to this method can be created with\n    [`NodeProp.add`](#common.NodeProp.add).\n    */\n    extend(...props) {\n        let newTypes = [];\n        for (let type of this.types) {\n            let newProps = null;\n            for (let source of props) {\n                let add = source(type);\n                if (add) {\n                    if (!newProps)\n                        newProps = Object.assign({}, type.props);\n                    newProps[add[0].id] = add[1];\n                }\n            }\n            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\n        }\n        return new NodeSet(newTypes);\n    }\n}\nconst CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();\n/**\nOptions that control iteration. Can be combined with the `|`\noperator to enable multiple ones.\n*/\nvar IterMode;\n(function (IterMode) {\n    /**\n    When enabled, iteration will only visit [`Tree`](#common.Tree)\n    objects, not nodes packed into\n    [`TreeBuffer`](#common.TreeBuffer)s.\n    */\n    IterMode[IterMode[\"ExcludeBuffers\"] = 1] = \"ExcludeBuffers\";\n    /**\n    Enable this to make iteration include anonymous nodes (such as\n    the nodes that wrap repeated grammar constructs into a balanced\n    tree).\n    */\n    IterMode[IterMode[\"IncludeAnonymous\"] = 2] = \"IncludeAnonymous\";\n    /**\n    By default, regular [mounted](#common.NodeProp^mounted) nodes\n    replace their base node in iteration. Enable this to ignore them\n    instead.\n    */\n    IterMode[IterMode[\"IgnoreMounts\"] = 4] = \"IgnoreMounts\";\n    /**\n    This option only applies in\n    [`enter`](#common.SyntaxNode.enter)-style methods. It tells the\n    library to not enter mounted overlays if one covers the given\n    position.\n    */\n    IterMode[IterMode[\"IgnoreOverlays\"] = 8] = \"IgnoreOverlays\";\n})(IterMode || (IterMode = {}));\n/**\nA piece of syntax tree. There are two ways to approach these\ntrees: the way they are actually stored in memory, and the\nconvenient way.\n\nSyntax trees are stored as a tree of `Tree` and `TreeBuffer`\nobjects. By packing detail information into `TreeBuffer` leaf\nnodes, the representation is made a lot more memory-efficient.\n\nHowever, when you want to actually work with tree nodes, this\nrepresentation is very awkward, so most client code will want to\nuse the [`TreeCursor`](#common.TreeCursor) or\n[`SyntaxNode`](#common.SyntaxNode) interface instead, which provides\na view on some part of this data structure, and can be used to\nmove around to adjacent nodes.\n*/\nclass Tree {\n    /**\n    Construct a new tree. See also [`Tree.build`](#common.Tree^build).\n    */\n    constructor(\n    /**\n    The type of the top node.\n    */\n    type, \n    /**\n    This node's child nodes.\n    */\n    children, \n    /**\n    The positions (offsets relative to the start of this tree) of\n    the children.\n    */\n    positions, \n    /**\n    The total length of this tree\n    */\n    length, \n    /**\n    Per-node [node props](#common.NodeProp) to associate with this node.\n    */\n    props) {\n        this.type = type;\n        this.children = children;\n        this.positions = positions;\n        this.length = length;\n        /**\n        @internal\n        */\n        this.props = null;\n        if (props && props.length) {\n            this.props = Object.create(null);\n            for (let [prop, value] of props)\n                this.props[typeof prop == \"number\" ? prop : prop.id] = value;\n        }\n    }\n    /**\n    @internal\n    */\n    toString() {\n        let mounted = MountedTree.get(this);\n        if (mounted && !mounted.overlay)\n            return mounted.tree.toString();\n        let children = \"\";\n        for (let ch of this.children) {\n            let str = ch.toString();\n            if (str) {\n                if (children)\n                    children += \",\";\n                children += str;\n            }\n        }\n        return !this.type.name ? children :\n            (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +\n                (children.length ? \"(\" + children + \")\" : \"\");\n    }\n    /**\n    Get a [tree cursor](#common.TreeCursor) positioned at the top of\n    the tree. Mode can be used to [control](#common.IterMode) which\n    nodes the cursor visits.\n    */\n    cursor(mode = 0) {\n        return new TreeCursor(this.topNode, mode);\n    }\n    /**\n    Get a [tree cursor](#common.TreeCursor) pointing into this tree\n    at the given position and side (see\n    [`moveTo`](#common.TreeCursor.moveTo).\n    */\n    cursorAt(pos, side = 0, mode = 0) {\n        let scope = CachedNode.get(this) || this.topNode;\n        let cursor = new TreeCursor(scope);\n        cursor.moveTo(pos, side);\n        CachedNode.set(this, cursor._tree);\n        return cursor;\n    }\n    /**\n    Get a [syntax node](#common.SyntaxNode) object for the top of the\n    tree.\n    */\n    get topNode() {\n        return new TreeNode(this, 0, 0, null);\n    }\n    /**\n    Get the [syntax node](#common.SyntaxNode) at the given position.\n    If `side` is -1, this will move into nodes that end at the\n    position. If 1, it'll move into nodes that start at the\n    position. With 0, it'll only enter nodes that cover the position\n    from both sides.\n    \n    Note that this will not enter\n    [overlays](#common.MountedTree.overlay), and you often want\n    [`resolveInner`](#common.Tree.resolveInner) instead.\n    */\n    resolve(pos, side = 0) {\n        let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);\n        CachedNode.set(this, node);\n        return node;\n    }\n    /**\n    Like [`resolve`](#common.Tree.resolve), but will enter\n    [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\n    pointing into the innermost overlaid tree at the given position\n    (with parent links going through all parent structure, including\n    the host trees).\n    */\n    resolveInner(pos, side = 0) {\n        let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);\n        CachedInnerNode.set(this, node);\n        return node;\n    }\n    /**\n    In some situations, it can be useful to iterate through all\n    nodes around a position, including those in overlays that don't\n    directly cover the position. This method gives you an iterator\n    that will produce all nodes, from small to big, around the given\n    position.\n    */\n    resolveStack(pos, side = 0) {\n        return stackIterator(this, pos, side);\n    }\n    /**\n    Iterate over the tree and its children, calling `enter` for any\n    node that touches the `from`/`to` region (if given) before\n    running over such a node's children, and `leave` (if given) when\n    leaving the node. When `enter` returns `false`, that node will\n    not have its children iterated over (or `leave` called).\n    */\n    iterate(spec) {\n        let { enter, leave, from = 0, to = this.length } = spec;\n        let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;\n        for (let c = this.cursor(mode | IterMode.IncludeAnonymous);;) {\n            let entered = false;\n            if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {\n                if (c.firstChild())\n                    continue;\n                entered = true;\n            }\n            for (;;) {\n                if (entered && leave && (anon || !c.type.isAnonymous))\n                    leave(c);\n                if (c.nextSibling())\n                    break;\n                if (!c.parent())\n                    return;\n                entered = true;\n            }\n        }\n    }\n    /**\n    Get the value of the given [node prop](#common.NodeProp) for this\n    node. Works with both per-node and per-type props.\n    */\n    prop(prop) {\n        return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;\n    }\n    /**\n    Returns the node's [per-node props](#common.NodeProp.perNode) in a\n    format that can be passed to the [`Tree`](#common.Tree)\n    constructor.\n    */\n    get propValues() {\n        let result = [];\n        if (this.props)\n            for (let id in this.props)\n                result.push([+id, this.props[id]]);\n        return result;\n    }\n    /**\n    Balance the direct children of this tree, producing a copy of\n    which may have children grouped into subtrees with type\n    [`NodeType.none`](#common.NodeType^none).\n    */\n    balance(config = {}) {\n        return this.children.length <= 8 /* Balance.BranchFactor */ ? this :\n            balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));\n    }\n    /**\n    Build a tree from a postfix-ordered buffer of node information,\n    or a cursor over such a buffer.\n    */\n    static build(data) { return buildTree(data); }\n}\n/**\nThe empty tree\n*/\nTree.empty = new Tree(NodeType.none, [], [], 0);\nclass FlatBufferCursor {\n    constructor(buffer, index) {\n        this.buffer = buffer;\n        this.index = index;\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    get pos() { return this.index; }\n    next() { this.index -= 4; }\n    fork() { return new FlatBufferCursor(this.buffer, this.index); }\n}\n/**\nTree buffers contain (type, start, end, endIndex) quads for each\nnode. In such a buffer, nodes are stored in prefix order (parents\nbefore children, with the endIndex of the parent indicating which\nchildren belong to it).\n*/\nclass TreeBuffer {\n    /**\n    Create a tree buffer.\n    */\n    constructor(\n    /**\n    The buffer's content.\n    */\n    buffer, \n    /**\n    The total length of the group of nodes in the buffer.\n    */\n    length, \n    /**\n    The node set used in this buffer.\n    */\n    set) {\n        this.buffer = buffer;\n        this.length = length;\n        this.set = set;\n    }\n    /**\n    @internal\n    */\n    get type() { return NodeType.none; }\n    /**\n    @internal\n    */\n    toString() {\n        let result = [];\n        for (let index = 0; index < this.buffer.length;) {\n            result.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result.join(\",\");\n    }\n    /**\n    @internal\n    */\n    childString(index) {\n        let id = this.buffer[index], endIndex = this.buffer[index + 3];\n        let type = this.set.types[id], result = type.name;\n        if (/\\W/.test(result) && !type.isError)\n            result = JSON.stringify(result);\n        index += 4;\n        if (endIndex == index)\n            return result;\n        let children = [];\n        while (index < endIndex) {\n            children.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result + \"(\" + children.join(\",\") + \")\";\n    }\n    /**\n    @internal\n    */\n    findChild(startIndex, endIndex, dir, pos, side) {\n        let { buffer } = this, pick = -1;\n        for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {\n            if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {\n                pick = i;\n                if (dir > 0)\n                    break;\n            }\n        }\n        return pick;\n    }\n    /**\n    @internal\n    */\n    slice(startI, endI, from) {\n        let b = this.buffer;\n        let copy = new Uint16Array(endI - startI), len = 0;\n        for (let i = startI, j = 0; i < endI;) {\n            copy[j++] = b[i++];\n            copy[j++] = b[i++] - from;\n            let to = copy[j++] = b[i++] - from;\n            copy[j++] = b[i++] - startI;\n            len = Math.max(len, to);\n        }\n        return new TreeBuffer(copy, len, this.set);\n    }\n}\nfunction checkSide(side, pos, from, to) {\n    switch (side) {\n        case -2 /* Side.Before */: return from < pos;\n        case -1 /* Side.AtOrBefore */: return to >= pos && from < pos;\n        case 0 /* Side.Around */: return from < pos && to > pos;\n        case 1 /* Side.AtOrAfter */: return from <= pos && to > pos;\n        case 2 /* Side.After */: return to > pos;\n        case 4 /* Side.DontCare */: return true;\n    }\n}\nfunction resolveNode(node, pos, side, overlays) {\n    var _a;\n    // Move up to a node that actually holds the position, if possible\n    while (node.from == node.to ||\n        (side < 1 ? node.from >= pos : node.from > pos) ||\n        (side > -1 ? node.to <= pos : node.to < pos)) {\n        let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;\n        if (!parent)\n            return node;\n        node = parent;\n    }\n    let mode = overlays ? 0 : IterMode.IgnoreOverlays;\n    // Must go up out of overlays when those do not overlap with pos\n    if (overlays)\n        for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {\n            if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)\n                node = parent;\n        }\n    for (;;) {\n        let inner = node.enter(pos, side, mode);\n        if (!inner)\n            return node;\n        node = inner;\n    }\n}\nclass BaseNode {\n    cursor(mode = 0) { return new TreeCursor(this, mode); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    matchContext(context) {\n        return matchNodeContext(this, context);\n    }\n    enterUnfinishedNodesBefore(pos) {\n        let scan = this.childBefore(pos), node = this;\n        while (scan) {\n            let last = scan.lastChild;\n            if (!last || last.to != scan.to)\n                break;\n            if (last.type.isError && last.from == last.to) {\n                node = scan;\n                scan = last.prevSibling;\n            }\n            else {\n                scan = last;\n            }\n        }\n        return node;\n    }\n    get node() { return this; }\n    get next() { return this.parent; }\n}\nclass TreeNode extends BaseNode {\n    constructor(_tree, from, \n    // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)\n    index, _parent) {\n        super();\n        this._tree = _tree;\n        this.from = from;\n        this.index = index;\n        this._parent = _parent;\n    }\n    get type() { return this._tree.type; }\n    get name() { return this._tree.type.name; }\n    get to() { return this.from + this._tree.length; }\n    nextChild(i, dir, pos, side, mode = 0) {\n        for (let parent = this;;) {\n            for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {\n                let next = children[i], start = positions[i] + parent.from;\n                if (!checkSide(side, pos, start, start + next.length))\n                    continue;\n                if (next instanceof TreeBuffer) {\n                    if (mode & IterMode.ExcludeBuffers)\n                        continue;\n                    let index = next.findChild(0, next.buffer.length, dir, pos - start, side);\n                    if (index > -1)\n                        return new BufferNode(new BufferContext(parent, next, i, start), null, index);\n                }\n                else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {\n                    let mounted;\n                    if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next)) && !mounted.overlay)\n                        return new TreeNode(mounted.tree, start, i, parent);\n                    let inner = new TreeNode(next, start, i, parent);\n                    return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner\n                        : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);\n                }\n            }\n            if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)\n                return null;\n            if (parent.index >= 0)\n                i = parent.index + dir;\n            else\n                i = dir < 0 ? -1 : parent._parent._tree.children.length;\n            parent = parent._parent;\n            if (!parent)\n                return null;\n        }\n    }\n    get firstChild() { return this.nextChild(0, 1, 0, 4 /* Side.DontCare */); }\n    get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */); }\n    childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* Side.After */); }\n    childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */); }\n    enter(pos, side, mode = 0) {\n        let mounted;\n        if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {\n            let rPos = pos - this.from;\n            for (let { from, to } of mounted.overlay) {\n                if ((side > 0 ? from <= rPos : from < rPos) &&\n                    (side < 0 ? to >= rPos : to > rPos))\n                    return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);\n            }\n        }\n        return this.nextChild(0, 1, pos, side, mode);\n    }\n    nextSignificantParent() {\n        let val = this;\n        while (val.type.isAnonymous && val._parent)\n            val = val._parent;\n        return val;\n    }\n    get parent() {\n        return this._parent ? this._parent.nextSignificantParent() : null;\n    }\n    get nextSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;\n    }\n    get prevSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;\n    }\n    get tree() { return this._tree; }\n    toTree() { return this._tree; }\n    /**\n    @internal\n    */\n    toString() { return this._tree.toString(); }\n}\nfunction getChildren(node, type, before, after) {\n    let cur = node.cursor(), result = [];\n    if (!cur.firstChild())\n        return result;\n    if (before != null)\n        for (let found = false; !found;) {\n            found = cur.type.is(before);\n            if (!cur.nextSibling())\n                return result;\n        }\n    for (;;) {\n        if (after != null && cur.type.is(after))\n            return result;\n        if (cur.type.is(type))\n            result.push(cur.node);\n        if (!cur.nextSibling())\n            return after == null ? result : [];\n    }\n}\nfunction matchNodeContext(node, context, i = context.length - 1) {\n    for (let p = node.parent; i >= 0; p = p.parent) {\n        if (!p)\n            return false;\n        if (!p.type.isAnonymous) {\n            if (context[i] && context[i] != p.name)\n                return false;\n            i--;\n        }\n    }\n    return true;\n}\nclass BufferContext {\n    constructor(parent, buffer, index, start) {\n        this.parent = parent;\n        this.buffer = buffer;\n        this.index = index;\n        this.start = start;\n    }\n}\nclass BufferNode extends BaseNode {\n    get name() { return this.type.name; }\n    get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }\n    get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }\n    constructor(context, _parent, index) {\n        super();\n        this.context = context;\n        this._parent = _parent;\n        this.index = index;\n        this.type = context.buffer.set.types[context.buffer.buffer[index]];\n    }\n    child(dir, pos, side) {\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get firstChild() { return this.child(1, 0, 4 /* Side.DontCare */); }\n    get lastChild() { return this.child(-1, 0, 4 /* Side.DontCare */); }\n    childAfter(pos) { return this.child(1, pos, 2 /* Side.After */); }\n    childBefore(pos) { return this.child(-1, pos, -2 /* Side.Before */); }\n    enter(pos, side, mode = 0) {\n        if (mode & IterMode.ExcludeBuffers)\n            return null;\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get parent() {\n        return this._parent || this.context.parent.nextSignificantParent();\n    }\n    externalSibling(dir) {\n        return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);\n    }\n    get nextSibling() {\n        let { buffer } = this.context;\n        let after = buffer.buffer[this.index + 3];\n        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))\n            return new BufferNode(this.context, this._parent, after);\n        return this.externalSibling(1);\n    }\n    get prevSibling() {\n        let { buffer } = this.context;\n        let parentStart = this._parent ? this._parent.index + 4 : 0;\n        if (this.index == parentStart)\n            return this.externalSibling(-1);\n        return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));\n    }\n    get tree() { return null; }\n    toTree() {\n        let children = [], positions = [];\n        let { buffer } = this.context;\n        let startI = this.index + 4, endI = buffer.buffer[this.index + 3];\n        if (endI > startI) {\n            let from = buffer.buffer[this.index + 1];\n            children.push(buffer.slice(startI, endI, from));\n            positions.push(0);\n        }\n        return new Tree(this.type, children, positions, this.to - this.from);\n    }\n    /**\n    @internal\n    */\n    toString() { return this.context.buffer.childString(this.index); }\n}\nfunction iterStack(heads) {\n    if (!heads.length)\n        return null;\n    let pick = 0, picked = heads[0];\n    for (let i = 1; i < heads.length; i++) {\n        let node = heads[i];\n        if (node.from > picked.from || node.to < picked.to) {\n            picked = node;\n            pick = i;\n        }\n    }\n    let next = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;\n    let newHeads = heads.slice();\n    if (next)\n        newHeads[pick] = next;\n    else\n        newHeads.splice(pick, 1);\n    return new StackIterator(newHeads, picked);\n}\nclass StackIterator {\n    constructor(heads, node) {\n        this.heads = heads;\n        this.node = node;\n    }\n    get next() { return iterStack(this.heads); }\n}\nfunction stackIterator(tree, pos, side) {\n    let inner = tree.resolveInner(pos, side), layers = null;\n    for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {\n        if (scan.index < 0) { // This is an overlay root\n            let parent = scan.parent;\n            (layers || (layers = [inner])).push(parent.resolve(pos, side));\n            scan = parent;\n        }\n        else {\n            let mount = MountedTree.get(scan.tree);\n            // Relevant overlay branching off\n            if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {\n                let root = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);\n                (layers || (layers = [inner])).push(resolveNode(root, pos, side, false));\n            }\n        }\n    }\n    return layers ? iterStack(layers) : inner;\n}\n/**\nA tree cursor object focuses on a given node in a syntax tree, and\nallows you to move to adjacent nodes.\n*/\nclass TreeCursor {\n    /**\n    Shorthand for `.type.name`.\n    */\n    get name() { return this.type.name; }\n    /**\n    @internal\n    */\n    constructor(node, \n    /**\n    @internal\n    */\n    mode = 0) {\n        this.mode = mode;\n        /**\n        @internal\n        */\n        this.buffer = null;\n        this.stack = [];\n        /**\n        @internal\n        */\n        this.index = 0;\n        this.bufferNode = null;\n        if (node instanceof TreeNode) {\n            this.yieldNode(node);\n        }\n        else {\n            this._tree = node.context.parent;\n            this.buffer = node.context;\n            for (let n = node._parent; n; n = n._parent)\n                this.stack.unshift(n.index);\n            this.bufferNode = node;\n            this.yieldBuf(node.index);\n        }\n    }\n    yieldNode(node) {\n        if (!node)\n            return false;\n        this._tree = node;\n        this.type = node.type;\n        this.from = node.from;\n        this.to = node.to;\n        return true;\n    }\n    yieldBuf(index, type) {\n        this.index = index;\n        let { start, buffer } = this.buffer;\n        this.type = type || buffer.set.types[buffer.buffer[index]];\n        this.from = start + buffer.buffer[index + 1];\n        this.to = start + buffer.buffer[index + 2];\n        return true;\n    }\n    /**\n    @internal\n    */\n    yield(node) {\n        if (!node)\n            return false;\n        if (node instanceof TreeNode) {\n            this.buffer = null;\n            return this.yieldNode(node);\n        }\n        this.buffer = node.context;\n        return this.yieldBuf(node.index, node.type);\n    }\n    /**\n    @internal\n    */\n    toString() {\n        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n    }\n    /**\n    @internal\n    */\n    enterChild(dir, pos, side) {\n        if (!this.buffer)\n            return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));\n        let { buffer } = this.buffer;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);\n        if (index < 0)\n            return false;\n        this.stack.push(this.index);\n        return this.yieldBuf(index);\n    }\n    /**\n    Move the cursor to this node's first child. When this returns\n    false, the node has no child, and the cursor has not been moved.\n    */\n    firstChild() { return this.enterChild(1, 0, 4 /* Side.DontCare */); }\n    /**\n    Move the cursor to this node's last child.\n    */\n    lastChild() { return this.enterChild(-1, 0, 4 /* Side.DontCare */); }\n    /**\n    Move the cursor to the first child that ends after `pos`.\n    */\n    childAfter(pos) { return this.enterChild(1, pos, 2 /* Side.After */); }\n    /**\n    Move to the last child that starts before `pos`.\n    */\n    childBefore(pos) { return this.enterChild(-1, pos, -2 /* Side.Before */); }\n    /**\n    Move the cursor to the child around `pos`. If side is -1 the\n    child may end at that position, when 1 it may start there. This\n    will also enter [overlaid](#common.MountedTree.overlay)\n    [mounted](#common.NodeProp^mounted) trees unless `overlays` is\n    set to false.\n    */\n    enter(pos, side, mode = this.mode) {\n        if (!this.buffer)\n            return this.yield(this._tree.enter(pos, side, mode));\n        return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);\n    }\n    /**\n    Move to the node's parent node, if this isn't the top node.\n    */\n    parent() {\n        if (!this.buffer)\n            return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);\n        if (this.stack.length)\n            return this.yieldBuf(this.stack.pop());\n        let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n        this.buffer = null;\n        return this.yieldNode(parent);\n    }\n    /**\n    @internal\n    */\n    sibling(dir) {\n        if (!this.buffer)\n            return !this._tree._parent ? false\n                : this.yield(this._tree.index < 0 ? null\n                    : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));\n        let { buffer } = this.buffer, d = this.stack.length - 1;\n        if (dir < 0) {\n            let parentStart = d < 0 ? 0 : this.stack[d] + 4;\n            if (this.index != parentStart)\n                return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));\n        }\n        else {\n            let after = buffer.buffer[this.index + 3];\n            if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))\n                return this.yieldBuf(after);\n        }\n        return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;\n    }\n    /**\n    Move to this node's next sibling, if any.\n    */\n    nextSibling() { return this.sibling(1); }\n    /**\n    Move to this node's previous sibling, if any.\n    */\n    prevSibling() { return this.sibling(-1); }\n    atLastNode(dir) {\n        let index, parent, { buffer } = this;\n        if (buffer) {\n            if (dir > 0) {\n                if (this.index < buffer.buffer.buffer.length)\n                    return false;\n            }\n            else {\n                for (let i = 0; i < this.index; i++)\n                    if (buffer.buffer.buffer[i + 3] < this.index)\n                        return false;\n            }\n            ({ index, parent } = buffer);\n        }\n        else {\n            ({ index, _parent: parent } = this._tree);\n        }\n        for (; parent; { index, _parent: parent } = parent) {\n            if (index > -1)\n                for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {\n                    let child = parent._tree.children[i];\n                    if ((this.mode & IterMode.IncludeAnonymous) ||\n                        child instanceof TreeBuffer ||\n                        !child.type.isAnonymous ||\n                        hasChild(child))\n                        return false;\n                }\n        }\n        return true;\n    }\n    move(dir, enter) {\n        if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */))\n            return true;\n        for (;;) {\n            if (this.sibling(dir))\n                return true;\n            if (this.atLastNode(dir) || !this.parent())\n                return false;\n        }\n    }\n    /**\n    Move to the next node in a\n    [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)\n    traversal, going from a node to its first child or, if the\n    current node is empty or `enter` is false, its next sibling or\n    the next sibling of the first parent node that has one.\n    */\n    next(enter = true) { return this.move(1, enter); }\n    /**\n    Move to the next node in a last-to-first pre-order traveral. A\n    node is followed by its last child or, if it has none, its\n    previous sibling or the previous sibling of the first parent\n    node that has one.\n    */\n    prev(enter = true) { return this.move(-1, enter); }\n    /**\n    Move the cursor to the innermost node that covers `pos`. If\n    `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n    it will enter nodes that start at `pos`.\n    */\n    moveTo(pos, side = 0) {\n        // Move up to a node that actually holds the position, if possible\n        while (this.from == this.to ||\n            (side < 1 ? this.from >= pos : this.from > pos) ||\n            (side > -1 ? this.to <= pos : this.to < pos))\n            if (!this.parent())\n                break;\n        // Then scan down into child nodes as far as possible\n        while (this.enterChild(1, pos, side)) { }\n        return this;\n    }\n    /**\n    Get a [syntax node](#common.SyntaxNode) at the cursor's current\n    position.\n    */\n    get node() {\n        if (!this.buffer)\n            return this._tree;\n        let cache = this.bufferNode, result = null, depth = 0;\n        if (cache && cache.context == this.buffer) {\n            scan: for (let index = this.index, d = this.stack.length; d >= 0;) {\n                for (let c = cache; c; c = c._parent)\n                    if (c.index == index) {\n                        if (index == this.index)\n                            return c;\n                        result = c;\n                        depth = d + 1;\n                        break scan;\n                    }\n                index = this.stack[--d];\n            }\n        }\n        for (let i = depth; i < this.stack.length; i++)\n            result = new BufferNode(this.buffer, result, this.stack[i]);\n        return this.bufferNode = new BufferNode(this.buffer, result, this.index);\n    }\n    /**\n    Get the [tree](#common.Tree) that represents the current node, if\n    any. Will return null when the node is in a [tree\n    buffer](#common.TreeBuffer).\n    */\n    get tree() {\n        return this.buffer ? null : this._tree._tree;\n    }\n    /**\n    Iterate over the current node and all its descendants, calling\n    `enter` when entering a node and `leave`, if given, when leaving\n    one. When `enter` returns `false`, any children of that node are\n    skipped, and `leave` isn't called for it.\n    */\n    iterate(enter, leave) {\n        for (let depth = 0;;) {\n            let mustLeave = false;\n            if (this.type.isAnonymous || enter(this) !== false) {\n                if (this.firstChild()) {\n                    depth++;\n                    continue;\n                }\n                if (!this.type.isAnonymous)\n                    mustLeave = true;\n            }\n            for (;;) {\n                if (mustLeave && leave)\n                    leave(this);\n                mustLeave = this.type.isAnonymous;\n                if (this.nextSibling())\n                    break;\n                if (!depth)\n                    return;\n                this.parent();\n                depth--;\n                mustLeave = true;\n            }\n        }\n    }\n    /**\n    Test whether the current node matches a given context—a sequence\n    of direct parent node names. Empty strings in the context array\n    are treated as wildcards.\n    */\n    matchContext(context) {\n        if (!this.buffer)\n            return matchNodeContext(this.node, context);\n        let { buffer } = this.buffer, { types } = buffer.set;\n        for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {\n            if (d < 0)\n                return matchNodeContext(this.node, context, i);\n            let type = types[buffer.buffer[this.stack[d]]];\n            if (!type.isAnonymous) {\n                if (context[i] && context[i] != type.name)\n                    return false;\n                i--;\n            }\n        }\n        return true;\n    }\n}\nfunction hasChild(tree) {\n    return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));\n}\nfunction buildTree(data) {\n    var _a;\n    let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;\n    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\n    let types = nodeSet.types;\n    let contextHash = 0, lookAhead = 0;\n    function takeNode(parentStart, minPos, children, positions, inRepeat, depth) {\n        let { id, start, end, size } = cursor;\n        let lookAheadAtStart = lookAhead;\n        while (size < 0) {\n            cursor.next();\n            if (size == -1 /* SpecialRecord.Reuse */) {\n                let node = reused[id];\n                children.push(node);\n                positions.push(start - parentStart);\n                return;\n            }\n            else if (size == -3 /* SpecialRecord.ContextChange */) { // Context change\n                contextHash = id;\n                return;\n            }\n            else if (size == -4 /* SpecialRecord.LookAhead */) {\n                lookAhead = id;\n                return;\n            }\n            else {\n                throw new RangeError(`Unrecognized record size: ${size}`);\n            }\n        }\n        let type = types[id], node, buffer;\n        let startPos = start - parentStart;\n        if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\n            // Small enough for a buffer, and no reused nodes inside\n            let data = new Uint16Array(buffer.size - buffer.skip);\n            let endPos = cursor.pos - buffer.size, index = data.length;\n            while (cursor.pos > endPos)\n                index = copyToBuffer(buffer.start, data, index);\n            node = new TreeBuffer(data, end - buffer.start, nodeSet);\n            startPos = buffer.start - parentStart;\n        }\n        else { // Make it a node\n            let endPos = cursor.pos - size;\n            cursor.next();\n            let localChildren = [], localPositions = [];\n            let localInRepeat = id >= minRepeatType ? id : -1;\n            let lastGroup = 0, lastEnd = end;\n            while (cursor.pos > endPos) {\n                if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {\n                    if (cursor.end <= lastEnd - maxBufferLength) {\n                        makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);\n                        lastGroup = localChildren.length;\n                        lastEnd = cursor.end;\n                    }\n                    cursor.next();\n                }\n                else if (depth > 2500 /* CutOff.Depth */) {\n                    takeFlatNode(start, endPos, localChildren, localPositions);\n                }\n                else {\n                    takeNode(start, endPos, localChildren, localPositions, localInRepeat, depth + 1);\n                }\n            }\n            if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)\n                makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);\n            localChildren.reverse();\n            localPositions.reverse();\n            if (localInRepeat > -1 && lastGroup > 0) {\n                let make = makeBalanced(type);\n                node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);\n            }\n            else {\n                node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);\n            }\n        }\n        children.push(node);\n        positions.push(startPos);\n    }\n    function takeFlatNode(parentStart, minPos, children, positions) {\n        let nodes = []; // Temporary, inverted array of leaf nodes found, with absolute positions\n        let nodeCount = 0, stopAt = -1;\n        while (cursor.pos > minPos) {\n            let { id, start, end, size } = cursor;\n            if (size > 4) { // Not a leaf\n                cursor.next();\n            }\n            else if (stopAt > -1 && start < stopAt) {\n                break;\n            }\n            else {\n                if (stopAt < 0)\n                    stopAt = end - maxBufferLength;\n                nodes.push(id, start, end);\n                nodeCount++;\n                cursor.next();\n            }\n        }\n        if (nodeCount) {\n            let buffer = new Uint16Array(nodeCount * 4);\n            let start = nodes[nodes.length - 2];\n            for (let i = nodes.length - 3, j = 0; i >= 0; i -= 3) {\n                buffer[j++] = nodes[i];\n                buffer[j++] = nodes[i + 1] - start;\n                buffer[j++] = nodes[i + 2] - start;\n                buffer[j++] = j;\n            }\n            children.push(new TreeBuffer(buffer, nodes[2] - start, nodeSet));\n            positions.push(start - parentStart);\n        }\n    }\n    function makeBalanced(type) {\n        return (children, positions, length) => {\n            let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;\n            if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {\n                if (!lastI && last.type == type && last.length == length)\n                    return last;\n                if (lookAheadProp = last.prop(NodeProp.lookAhead))\n                    lookAhead = positions[lastI] + last.length + lookAheadProp;\n            }\n            return makeTree(type, children, positions, length, lookAhead);\n        };\n    }\n    function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {\n        let localChildren = [], localPositions = [];\n        while (children.length > i) {\n            localChildren.push(children.pop());\n            localPositions.push(positions.pop() + base - from);\n        }\n        children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));\n        positions.push(from - base);\n    }\n    function makeTree(type, children, positions, length, lookAhead = 0, props) {\n        if (contextHash) {\n            let pair = [NodeProp.contextHash, contextHash];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        if (lookAhead > 25) {\n            let pair = [NodeProp.lookAhead, lookAhead];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        return new Tree(type, children, positions, length, props);\n    }\n    function findBufferSize(maxSize, inRepeat) {\n        // Scan through the buffer to find previous siblings that fit\n        // together in a TreeBuffer, and don't contain any reused nodes\n        // (which can't be stored in a buffer).\n        // If `inRepeat` is > -1, ignore node boundaries of that type for\n        // nesting, but make sure the end falls either at the start\n        // (`maxSize`) or before such a node.\n        let fork = cursor.fork();\n        let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;\n        let result = { size: 0, start: 0, skip: 0 };\n        scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {\n            let nodeSize = fork.size;\n            // Pretend nested repeat nodes of the same type don't exist\n            if (fork.id == inRepeat && nodeSize >= 0) {\n                // Except that we store the current state as a valid return\n                // value.\n                result.size = size;\n                result.start = start;\n                result.skip = skip;\n                skip += 4;\n                size += 4;\n                fork.next();\n                continue;\n            }\n            let startPos = fork.pos - nodeSize;\n            if (nodeSize < 0 || startPos < minPos || fork.start < minStart)\n                break;\n            let localSkipped = fork.id >= minRepeatType ? 4 : 0;\n            let nodeStart = fork.start;\n            fork.next();\n            while (fork.pos > startPos) {\n                if (fork.size < 0) {\n                    if (fork.size == -3 /* SpecialRecord.ContextChange */)\n                        localSkipped += 4;\n                    else\n                        break scan;\n                }\n                else if (fork.id >= minRepeatType) {\n                    localSkipped += 4;\n                }\n                fork.next();\n            }\n            start = nodeStart;\n            size += nodeSize;\n            skip += localSkipped;\n        }\n        if (inRepeat < 0 || size == maxSize) {\n            result.size = size;\n            result.start = start;\n            result.skip = skip;\n        }\n        return result.size > 4 ? result : undefined;\n    }\n    function copyToBuffer(bufferStart, buffer, index) {\n        let { id, start, end, size } = cursor;\n        cursor.next();\n        if (size >= 0 && id < minRepeatType) {\n            let startIndex = index;\n            if (size > 4) {\n                let endPos = cursor.pos - (size - 4);\n                while (cursor.pos > endPos)\n                    index = copyToBuffer(bufferStart, buffer, index);\n            }\n            buffer[--index] = startIndex;\n            buffer[--index] = end - bufferStart;\n            buffer[--index] = start - bufferStart;\n            buffer[--index] = id;\n        }\n        else if (size == -3 /* SpecialRecord.ContextChange */) {\n            contextHash = id;\n        }\n        else if (size == -4 /* SpecialRecord.LookAhead */) {\n            lookAhead = id;\n        }\n        return index;\n    }\n    let children = [], positions = [];\n    while (cursor.pos > 0)\n        takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1, 0);\n    let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);\n    return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);\n}\nconst nodeSizeCache = new WeakMap;\nfunction nodeSize(balanceType, node) {\n    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)\n        return 1;\n    let size = nodeSizeCache.get(node);\n    if (size == null) {\n        size = 1;\n        for (let child of node.children) {\n            if (child.type != balanceType || !(child instanceof Tree)) {\n                size = 1;\n                break;\n            }\n            size += nodeSize(balanceType, child);\n        }\n        nodeSizeCache.set(node, size);\n    }\n    return size;\n}\nfunction balanceRange(\n// The type the balanced tree's inner nodes.\nbalanceType, \n// The direct children and their positions\nchildren, positions, \n// The index range in children/positions to use\nfrom, to, \n// The start position of the nodes, relative to their parent.\nstart, \n// Length of the outer node\nlength, \n// Function to build the top node of the balanced tree\nmkTop, \n// Function to build internal nodes for the balanced tree\nmkTree) {\n    let total = 0;\n    for (let i = from; i < to; i++)\n        total += nodeSize(balanceType, children[i]);\n    let maxChild = Math.ceil((total * 1.5) / 8 /* Balance.BranchFactor */);\n    let localChildren = [], localPositions = [];\n    function divide(children, positions, from, to, offset) {\n        for (let i = from; i < to;) {\n            let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);\n            i++;\n            for (; i < to; i++) {\n                let nextSize = nodeSize(balanceType, children[i]);\n                if (groupSize + nextSize >= maxChild)\n                    break;\n                groupSize += nextSize;\n            }\n            if (i == groupFrom + 1) {\n                if (groupSize > maxChild) {\n                    let only = children[groupFrom]; // Only trees can have a size > 1\n                    divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);\n                    continue;\n                }\n                localChildren.push(children[groupFrom]);\n            }\n            else {\n                let length = positions[i - 1] + children[i - 1].length - groupStart;\n                localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));\n            }\n            localPositions.push(groupStart + offset - start);\n        }\n    }\n    divide(children, positions, from, to, 0);\n    return (mkTop || mkTree)(localChildren, localPositions, length);\n}\n/**\nProvides a way to associate values with pieces of trees. As long\nas that part of the tree is reused, the associated values can be\nretrieved from an updated tree.\n*/\nclass NodeWeakMap {\n    constructor() {\n        this.map = new WeakMap();\n    }\n    setBuffer(buffer, index, value) {\n        let inner = this.map.get(buffer);\n        if (!inner)\n            this.map.set(buffer, inner = new Map);\n        inner.set(index, value);\n    }\n    getBuffer(buffer, index) {\n        let inner = this.map.get(buffer);\n        return inner && inner.get(index);\n    }\n    /**\n    Set the value for this syntax node.\n    */\n    set(node, value) {\n        if (node instanceof BufferNode)\n            this.setBuffer(node.context.buffer, node.index, value);\n        else if (node instanceof TreeNode)\n            this.map.set(node.tree, value);\n    }\n    /**\n    Retrieve value for this syntax node, if it exists in the map.\n    */\n    get(node) {\n        return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index)\n            : node instanceof TreeNode ? this.map.get(node.tree) : undefined;\n    }\n    /**\n    Set the value for the node that a cursor currently points to.\n    */\n    cursorSet(cursor, value) {\n        if (cursor.buffer)\n            this.setBuffer(cursor.buffer.buffer, cursor.index, value);\n        else\n            this.map.set(cursor.tree, value);\n    }\n    /**\n    Retrieve the value for the node that a cursor currently points\n    to.\n    */\n    cursorGet(cursor) {\n        return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);\n    }\n}\n\n/**\nTree fragments are used during [incremental\nparsing](#common.Parser.startParse) to track parts of old trees\nthat can be reused in a new parse. An array of fragments is used\nto track regions of an old tree whose nodes might be reused in new\nparses. Use the static\n[`applyChanges`](#common.TreeFragment^applyChanges) method to\nupdate fragments for document changes.\n*/\nclass TreeFragment {\n    /**\n    Construct a tree fragment. You'll usually want to use\n    [`addTree`](#common.TreeFragment^addTree) and\n    [`applyChanges`](#common.TreeFragment^applyChanges) instead of\n    calling this directly.\n    */\n    constructor(\n    /**\n    The start of the unchanged range pointed to by this fragment.\n    This refers to an offset in the _updated_ document (as opposed\n    to the original tree).\n    */\n    from, \n    /**\n    The end of the unchanged range.\n    */\n    to, \n    /**\n    The tree that this fragment is based on.\n    */\n    tree, \n    /**\n    The offset between the fragment's tree and the document that\n    this fragment can be used against. Add this when going from\n    document to tree positions, subtract it to go from tree to\n    document positions.\n    */\n    offset, openStart = false, openEnd = false) {\n        this.from = from;\n        this.to = to;\n        this.tree = tree;\n        this.offset = offset;\n        this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);\n    }\n    /**\n    Whether the start of the fragment represents the start of a\n    parse, or the end of a change. (In the second case, it may not\n    be safe to reuse some nodes at the start, depending on the\n    parsing algorithm.)\n    */\n    get openStart() { return (this.open & 1 /* Open.Start */) > 0; }\n    /**\n    Whether the end of the fragment represents the end of a\n    full-document parse, or the start of a change.\n    */\n    get openEnd() { return (this.open & 2 /* Open.End */) > 0; }\n    /**\n    Create a set of fragments from a freshly parsed tree, or update\n    an existing set of fragments by replacing the ones that overlap\n    with a tree with content from the new tree. When `partial` is\n    true, the parse is treated as incomplete, and the resulting\n    fragment has [`openEnd`](#common.TreeFragment.openEnd) set to\n    true.\n    */\n    static addTree(tree, fragments = [], partial = false) {\n        let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];\n        for (let f of fragments)\n            if (f.to > tree.length)\n                result.push(f);\n        return result;\n    }\n    /**\n    Apply a set of edits to an array of fragments, removing or\n    splitting fragments as necessary to remove edited ranges, and\n    adjusting offsets for fragments that moved.\n    */\n    static applyChanges(fragments, changes, minGap = 128) {\n        if (!changes.length)\n            return fragments;\n        let result = [];\n        let fI = 1, nextF = fragments.length ? fragments[0] : null;\n        for (let cI = 0, pos = 0, off = 0;; cI++) {\n            let nextC = cI < changes.length ? changes[cI] : null;\n            let nextPos = nextC ? nextC.fromA : 1e9;\n            if (nextPos - pos >= minGap)\n                while (nextF && nextF.from < nextPos) {\n                    let cut = nextF;\n                    if (pos >= cut.from || nextPos <= cut.to || off) {\n                        let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;\n                        cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);\n                    }\n                    if (cut)\n                        result.push(cut);\n                    if (nextF.to > nextPos)\n                        break;\n                    nextF = fI < fragments.length ? fragments[fI++] : null;\n                }\n            if (!nextC)\n                break;\n            pos = nextC.toA;\n            off = nextC.toA - nextC.toB;\n        }\n        return result;\n    }\n}\n/**\nA superclass that parsers should extend.\n*/\nclass Parser {\n    /**\n    Start a parse, returning a [partial parse](#common.PartialParse)\n    object. [`fragments`](#common.TreeFragment) can be passed in to\n    make the parse incremental.\n    \n    By default, the entire input is parsed. You can pass `ranges`,\n    which should be a sorted array of non-empty, non-overlapping\n    ranges, to parse only those ranges. The tree returned in that\n    case will start at `ranges[0].from`.\n    */\n    startParse(input, fragments, ranges) {\n        if (typeof input == \"string\")\n            input = new StringInput(input);\n        ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];\n        return this.createParse(input, fragments || [], ranges);\n    }\n    /**\n    Run a full parse, returning the resulting tree.\n    */\n    parse(input, fragments, ranges) {\n        let parse = this.startParse(input, fragments, ranges);\n        for (;;) {\n            let done = parse.advance();\n            if (done)\n                return done;\n        }\n    }\n}\nclass StringInput {\n    constructor(string) {\n        this.string = string;\n    }\n    get length() { return this.string.length; }\n    chunk(from) { return this.string.slice(from); }\n    get lineChunks() { return false; }\n    read(from, to) { return this.string.slice(from, to); }\n}\n\n/**\nCreate a parse wrapper that, after the inner parse completes,\nscans its tree for mixed language regions with the `nest`\nfunction, runs the resulting [inner parses](#common.NestedParse),\nand then [mounts](#common.NodeProp^mounted) their results onto the\ntree.\n*/\nfunction parseMixed(nest) {\n    return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);\n}\nclass InnerParse {\n    constructor(parser, parse, overlay, target, from) {\n        this.parser = parser;\n        this.parse = parse;\n        this.overlay = overlay;\n        this.target = target;\n        this.from = from;\n    }\n}\nfunction checkRanges(ranges) {\n    if (!ranges.length || ranges.some(r => r.from >= r.to))\n        throw new RangeError(\"Invalid inner parse ranges given: \" + JSON.stringify(ranges));\n}\nclass ActiveOverlay {\n    constructor(parser, predicate, mounts, index, start, target, prev) {\n        this.parser = parser;\n        this.predicate = predicate;\n        this.mounts = mounts;\n        this.index = index;\n        this.start = start;\n        this.target = target;\n        this.prev = prev;\n        this.depth = 0;\n        this.ranges = [];\n    }\n}\nconst stoppedInner = new NodeProp({ perNode: true });\nclass MixedParse {\n    constructor(base, nest, input, fragments, ranges) {\n        this.nest = nest;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.inner = [];\n        this.innerDone = 0;\n        this.baseTree = null;\n        this.stoppedAt = null;\n        this.baseParse = base;\n    }\n    advance() {\n        if (this.baseParse) {\n            let done = this.baseParse.advance();\n            if (!done)\n                return null;\n            this.baseParse = null;\n            this.baseTree = done;\n            this.startInner();\n            if (this.stoppedAt != null)\n                for (let inner of this.inner)\n                    inner.parse.stopAt(this.stoppedAt);\n        }\n        if (this.innerDone == this.inner.length) {\n            let result = this.baseTree;\n            if (this.stoppedAt != null)\n                result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));\n            return result;\n        }\n        let inner = this.inner[this.innerDone], done = inner.parse.advance();\n        if (done) {\n            this.innerDone++;\n            // This is a somewhat dodgy but super helpful hack where we\n            // patch up nodes created by the inner parse (and thus\n            // presumably not aliased anywhere else) to hold the information\n            // about the inner parse.\n            let props = Object.assign(Object.create(null), inner.target.props);\n            props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);\n            inner.target.props = props;\n        }\n        return null;\n    }\n    get parsedPos() {\n        if (this.baseParse)\n            return 0;\n        let pos = this.input.length;\n        for (let i = this.innerDone; i < this.inner.length; i++) {\n            if (this.inner[i].from < pos)\n                pos = Math.min(pos, this.inner[i].parse.parsedPos);\n        }\n        return pos;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n        if (this.baseParse)\n            this.baseParse.stopAt(pos);\n        else\n            for (let i = this.innerDone; i < this.inner.length; i++)\n                this.inner[i].parse.stopAt(pos);\n    }\n    startInner() {\n        let fragmentCursor = new FragmentCursor(this.fragments);\n        let overlay = null;\n        let covered = null;\n        let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n        scan: for (let nest, isCovered;;) {\n            let enter = true, range;\n            if (this.stoppedAt != null && cursor.from >= this.stoppedAt) {\n                enter = false;\n            }\n            else if (fragmentCursor.hasNode(cursor)) {\n                if (overlay) {\n                    let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);\n                    if (match)\n                        for (let r of match.mount.overlay) {\n                            let from = r.from + match.pos, to = r.to + match.pos;\n                            if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from))\n                                overlay.ranges.push({ from, to });\n                        }\n                }\n                enter = false;\n            }\n            else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {\n                enter = isCovered != 2 /* Cover.Full */;\n            }\n            else if (!cursor.type.isAnonymous && (nest = this.nest(cursor, this.input)) &&\n                (cursor.from < cursor.to || !nest.overlay)) {\n                if (!cursor.tree)\n                    materialize(cursor);\n                let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);\n                if (typeof nest.overlay == \"function\") {\n                    overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);\n                }\n                else {\n                    let ranges = punchRanges(this.ranges, nest.overlay ||\n                        (cursor.from < cursor.to ? [new Range(cursor.from, cursor.to)] : []));\n                    if (ranges.length)\n                        checkRanges(ranges);\n                    if (ranges.length || !nest.overlay)\n                        this.inner.push(new InnerParse(nest.parser, ranges.length ? nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges)\n                            : nest.parser.startParse(\"\"), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges.length ? ranges[0].from : cursor.from));\n                    if (!nest.overlay)\n                        enter = false;\n                    else if (ranges.length)\n                        covered = { ranges, depth: 0, prev: covered };\n                }\n            }\n            else if (overlay && (range = overlay.predicate(cursor))) {\n                if (range === true)\n                    range = new Range(cursor.from, cursor.to);\n                if (range.from < range.to)\n                    overlay.ranges.push(range);\n            }\n            if (enter && cursor.firstChild()) {\n                if (overlay)\n                    overlay.depth++;\n                if (covered)\n                    covered.depth++;\n            }\n            else {\n                for (;;) {\n                    if (cursor.nextSibling())\n                        break;\n                    if (!cursor.parent())\n                        break scan;\n                    if (overlay && !--overlay.depth) {\n                        let ranges = punchRanges(this.ranges, overlay.ranges);\n                        if (ranges.length) {\n                            checkRanges(ranges);\n                            this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges[0].from));\n                        }\n                        overlay = overlay.prev;\n                    }\n                    if (covered && !--covered.depth)\n                        covered = covered.prev;\n                }\n            }\n        }\n    }\n}\nfunction checkCover(covered, from, to) {\n    for (let range of covered) {\n        if (range.from >= to)\n            break;\n        if (range.to > from)\n            return range.from <= from && range.to >= to ? 2 /* Cover.Full */ : 1 /* Cover.Partial */;\n    }\n    return 0 /* Cover.None */;\n}\n// Take a piece of buffer and convert it into a stand-alone\n// TreeBuffer.\nfunction sliceBuf(buf, startI, endI, nodes, positions, off) {\n    if (startI < endI) {\n        let from = buf.buffer[startI + 1];\n        nodes.push(buf.slice(startI, endI, from));\n        positions.push(from - off);\n    }\n}\n// This function takes a node that's in a buffer, and converts it, and\n// its parent buffer nodes, into a Tree. This is again acting on the\n// assumption that the trees and buffers have been constructed by the\n// parse that was ran via the mix parser, and thus aren't shared with\n// any other code, making violations of the immutability safe.\nfunction materialize(cursor) {\n    let { node } = cursor, stack = [];\n    let buffer = node.context.buffer;\n    // Scan up to the nearest tree\n    do {\n        stack.push(cursor.index);\n        cursor.parent();\n    } while (!cursor.tree);\n    // Find the index of the buffer in that tree\n    let base = cursor.tree, i = base.children.indexOf(buffer);\n    let buf = base.children[i], b = buf.buffer, newStack = [i];\n    // Split a level in the buffer, putting the nodes before and after\n    // the child that contains `node` into new buffers.\n    function split(startI, endI, type, innerOffset, length, stackPos) {\n        let targetI = stack[stackPos];\n        let children = [], positions = [];\n        sliceBuf(buf, startI, targetI, children, positions, innerOffset);\n        let from = b[targetI + 1], to = b[targetI + 2];\n        newStack.push(children.length);\n        let child = stackPos\n            ? split(targetI + 4, b[targetI + 3], buf.set.types[b[targetI]], from, to - from, stackPos - 1)\n            : node.toTree();\n        children.push(child);\n        positions.push(from - innerOffset);\n        sliceBuf(buf, b[targetI + 3], endI, children, positions, innerOffset);\n        return new Tree(type, children, positions, length);\n    }\n    base.children[i] = split(0, b.length, NodeType.none, 0, buf.length, stack.length - 1);\n    // Move the cursor back to the target node\n    for (let index of newStack) {\n        let tree = cursor.tree.children[index], pos = cursor.tree.positions[index];\n        cursor.yield(new TreeNode(tree, pos + cursor.from, index, cursor._tree));\n    }\n}\nclass StructureCursor {\n    constructor(root, offset) {\n        this.offset = offset;\n        this.done = false;\n        this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n    }\n    // Move to the first node (in pre-order) that starts at or after `pos`.\n    moveTo(pos) {\n        let { cursor } = this, p = pos - this.offset;\n        while (!this.done && cursor.from < p) {\n            if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;\n            else if (!cursor.next(false))\n                this.done = true;\n        }\n    }\n    hasNode(cursor) {\n        this.moveTo(cursor.from);\n        if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {\n            for (let tree = this.cursor.tree;;) {\n                if (tree == cursor.tree)\n                    return true;\n                if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)\n                    tree = tree.children[0];\n                else\n                    break;\n            }\n        }\n        return false;\n    }\n}\nclass FragmentCursor {\n    constructor(fragments) {\n        var _a;\n        this.fragments = fragments;\n        this.curTo = 0;\n        this.fragI = 0;\n        if (fragments.length) {\n            let first = this.curFrag = fragments[0];\n            this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;\n            this.inner = new StructureCursor(first.tree, -first.offset);\n        }\n        else {\n            this.curFrag = this.inner = null;\n        }\n    }\n    hasNode(node) {\n        while (this.curFrag && node.from >= this.curTo)\n            this.nextFrag();\n        return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);\n    }\n    nextFrag() {\n        var _a;\n        this.fragI++;\n        if (this.fragI == this.fragments.length) {\n            this.curFrag = this.inner = null;\n        }\n        else {\n            let frag = this.curFrag = this.fragments[this.fragI];\n            this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;\n            this.inner = new StructureCursor(frag.tree, -frag.offset);\n        }\n    }\n    findMounts(pos, parser) {\n        var _a;\n        let result = [];\n        if (this.inner) {\n            this.inner.cursor.moveTo(pos, 1);\n            for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {\n                let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);\n                if (mount && mount.parser == parser) {\n                    for (let i = this.fragI; i < this.fragments.length; i++) {\n                        let frag = this.fragments[i];\n                        if (frag.from >= pos.to)\n                            break;\n                        if (frag.tree == this.curFrag.tree)\n                            result.push({\n                                frag,\n                                pos: pos.from - frag.offset,\n                                mount\n                            });\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\nfunction punchRanges(outer, ranges) {\n    let copy = null, current = ranges;\n    for (let i = 1, j = 0; i < outer.length; i++) {\n        let gapFrom = outer[i - 1].to, gapTo = outer[i].from;\n        for (; j < current.length; j++) {\n            let r = current[j];\n            if (r.from >= gapTo)\n                break;\n            if (r.to <= gapFrom)\n                continue;\n            if (!copy)\n                current = copy = ranges.slice();\n            if (r.from < gapFrom) {\n                copy[j] = new Range(r.from, gapFrom);\n                if (r.to > gapTo)\n                    copy.splice(j + 1, 0, new Range(gapTo, r.to));\n            }\n            else if (r.to > gapTo) {\n                copy[j--] = new Range(gapTo, r.to);\n            }\n            else {\n                copy.splice(j--, 1);\n            }\n        }\n    }\n    return current;\n}\nfunction findCoverChanges(a, b, from, to) {\n    let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;\n    let result = [];\n    for (;;) {\n        let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;\n        let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;\n        if (inA != inB) {\n            let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);\n            if (start < end)\n                result.push(new Range(start, end));\n        }\n        pos = Math.min(nextA, nextB);\n        if (pos == 1e9)\n            break;\n        if (nextA == pos) {\n            if (!inA)\n                inA = true;\n            else {\n                inA = false;\n                iA++;\n            }\n        }\n        if (nextB == pos) {\n            if (!inB)\n                inB = true;\n            else {\n                inB = false;\n                iB++;\n            }\n        }\n    }\n    return result;\n}\n// Given a number of fragments for the outer tree, and a set of ranges\n// to parse, find fragments for inner trees mounted around those\n// ranges, if any.\nfunction enterFragments(mounts, ranges) {\n    let result = [];\n    for (let { pos, mount, frag } of mounts) {\n        let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;\n        let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);\n        if (mount.overlay) {\n            let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));\n            let changes = findCoverChanges(ranges, overlay, from, to);\n            for (let i = 0, pos = from;; i++) {\n                let last = i == changes.length, end = last ? to : changes[i].from;\n                if (end > pos)\n                    result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos || frag.openStart, frag.to <= end || frag.openEnd));\n                if (last)\n                    break;\n                pos = changes[i].to;\n            }\n        }\n        else {\n            result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));\n        }\n    }\n    return result;\n}\n\nexport { DefaultBufferLength, IterMode, MountedTree, NodeProp, NodeSet, NodeType, NodeWeakMap, Parser, Tree, TreeBuffer, TreeCursor, TreeFragment, parseMixed };\n","import { NodeProp } from '@lezer/common';\n\nlet nextTagID = 0;\n/**\nHighlighting tags are markers that denote a highlighting category.\nThey are [associated](#highlight.styleTags) with parts of a syntax\ntree by a language mode, and then mapped to an actual CSS style by\na [highlighter](#highlight.Highlighter).\n\nBecause syntax tree node types and highlight styles have to be\nable to talk the same language, CodeMirror uses a mostly _closed_\n[vocabulary](#highlight.tags) of syntax tags (as opposed to\ntraditional open string-based systems, which make it hard for\nhighlighting themes to cover all the tokens produced by the\nvarious languages).\n\nIt _is_ possible to [define](#highlight.Tag^define) your own\nhighlighting tags for system-internal use (where you control both\nthe language package and the highlighter), but such tags will not\nbe picked up by regular highlighters (though you can derive them\nfrom standard tags to allow highlighters to fall back to those).\n*/\nclass Tag {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The set of this tag and all its parent tags, starting with\n    this one itself and sorted in order of decreasing specificity.\n    */\n    set, \n    /**\n    The base unmodified tag that this one is based on, if it's\n    modified @internal\n    */\n    base, \n    /**\n    The modifiers applied to this.base @internal\n    */\n    modified) {\n        this.set = set;\n        this.base = base;\n        this.modified = modified;\n        /**\n        @internal\n        */\n        this.id = nextTagID++;\n    }\n    /**\n    Define a new tag. If `parent` is given, the tag is treated as a\n    sub-tag of that parent, and\n    [highlighters](#highlight.tagHighlighter) that don't mention\n    this tag will try to fall back to the parent tag (or grandparent\n    tag, etc).\n    */\n    static define(parent) {\n        if (parent === null || parent === void 0 ? void 0 : parent.base)\n            throw new Error(\"Can not derive from a modified tag\");\n        let tag = new Tag([], null, []);\n        tag.set.push(tag);\n        if (parent)\n            for (let t of parent.set)\n                tag.set.push(t);\n        return tag;\n    }\n    /**\n    Define a tag _modifier_, which is a function that, given a tag,\n    will return a tag that is a subtag of the original. Applying the\n    same modifier to a twice tag will return the same value (`m1(t1)\n    == m1(t1)`) and applying multiple modifiers will, regardless or\n    order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).\n    \n    When multiple modifiers are applied to a given base tag, each\n    smaller set of modifiers is registered as a parent, so that for\n    example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,\n    `m1(m3(t1)`, and so on.\n    */\n    static defineModifier() {\n        let mod = new Modifier;\n        return (tag) => {\n            if (tag.modified.indexOf(mod) > -1)\n                return tag;\n            return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));\n        };\n    }\n}\nlet nextModifierID = 0;\nclass Modifier {\n    constructor() {\n        this.instances = [];\n        this.id = nextModifierID++;\n    }\n    static get(base, mods) {\n        if (!mods.length)\n            return base;\n        let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));\n        if (exists)\n            return exists;\n        let set = [], tag = new Tag(set, base, mods);\n        for (let m of mods)\n            m.instances.push(tag);\n        let configs = powerSet(mods);\n        for (let parent of base.set)\n            if (!parent.modified.length)\n                for (let config of configs)\n                    set.push(Modifier.get(parent, config));\n        return tag;\n    }\n}\nfunction sameArray(a, b) {\n    return a.length == b.length && a.every((x, i) => x == b[i]);\n}\nfunction powerSet(array) {\n    let sets = [[]];\n    for (let i = 0; i < array.length; i++) {\n        for (let j = 0, e = sets.length; j < e; j++) {\n            sets.push(sets[j].concat(array[i]));\n        }\n    }\n    return sets.sort((a, b) => b.length - a.length);\n}\n/**\nThis function is used to add a set of tags to a language syntax\nvia [`NodeSet.extend`](#common.NodeSet.extend) or\n[`LRParser.configure`](#lr.LRParser.configure).\n\nThe argument object maps node selectors to [highlighting\ntags](#highlight.Tag) or arrays of tags.\n\nNode selectors may hold one or more (space-separated) node paths.\nSuch a path can be a [node name](#common.NodeType.name), or\nmultiple node names (or `*` wildcards) separated by slash\ncharacters, as in `\"Block/Declaration/VariableName\"`. Such a path\nmatches the final node but only if its direct parent nodes are the\nother nodes mentioned. A `*` in such a path matches any parent,\nbut only a single level—wildcards that match multiple parents\naren't supported, both for efficiency reasons and because Lezer\ntrees make it rather hard to reason about what they would match.)\n\nA path can be ended with `/...` to indicate that the tag assigned\nto the node should also apply to all child nodes, even if they\nmatch their own style (by default, only the innermost style is\nused).\n\nWhen a path ends in `!`, as in `Attribute!`, no further matching\nhappens for the node's child nodes, and the entire node gets the\ngiven style.\n\nIn this notation, node names that contain `/`, `!`, `*`, or `...`\nmust be quoted as JSON strings.\n\nFor example:\n\n```javascript\nparser.withProps(\n  styleTags({\n    // Style Number and BigNumber nodes\n    \"Number BigNumber\": tags.number,\n    // Style Escape nodes whose parent is String\n    \"String/Escape\": tags.escape,\n    // Style anything inside Attributes nodes\n    \"Attributes!\": tags.meta,\n    // Add a style to all content inside Italic nodes\n    \"Italic/...\": tags.emphasis,\n    // Style InvalidString nodes as both `string` and `invalid`\n    \"InvalidString\": [tags.string, tags.invalid],\n    // Style the node named \"/\" as punctuation\n    '\"/\"': tags.punctuation\n  })\n)\n```\n*/\nfunction styleTags(spec) {\n    let byName = Object.create(null);\n    for (let prop in spec) {\n        let tags = spec[prop];\n        if (!Array.isArray(tags))\n            tags = [tags];\n        for (let part of prop.split(\" \"))\n            if (part) {\n                let pieces = [], mode = 2 /* Mode.Normal */, rest = part;\n                for (let pos = 0;;) {\n                    if (rest == \"...\" && pos > 0 && pos + 3 == part.length) {\n                        mode = 1 /* Mode.Inherit */;\n                        break;\n                    }\n                    let m = /^\"(?:[^\"\\\\]|\\\\.)*?\"|[^\\/!]+/.exec(rest);\n                    if (!m)\n                        throw new RangeError(\"Invalid path: \" + part);\n                    pieces.push(m[0] == \"*\" ? \"\" : m[0][0] == '\"' ? JSON.parse(m[0]) : m[0]);\n                    pos += m[0].length;\n                    if (pos == part.length)\n                        break;\n                    let next = part[pos++];\n                    if (pos == part.length && next == \"!\") {\n                        mode = 0 /* Mode.Opaque */;\n                        break;\n                    }\n                    if (next != \"/\")\n                        throw new RangeError(\"Invalid path: \" + part);\n                    rest = part.slice(pos);\n                }\n                let last = pieces.length - 1, inner = pieces[last];\n                if (!inner)\n                    throw new RangeError(\"Invalid path: \" + part);\n                let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);\n                byName[inner] = rule.sort(byName[inner]);\n            }\n    }\n    return ruleNodeProp.add(byName);\n}\nconst ruleNodeProp = new NodeProp();\nclass Rule {\n    constructor(tags, mode, context, next) {\n        this.tags = tags;\n        this.mode = mode;\n        this.context = context;\n        this.next = next;\n    }\n    get opaque() { return this.mode == 0 /* Mode.Opaque */; }\n    get inherit() { return this.mode == 1 /* Mode.Inherit */; }\n    sort(other) {\n        if (!other || other.depth < this.depth) {\n            this.next = other;\n            return this;\n        }\n        other.next = this.sort(other.next);\n        return other;\n    }\n    get depth() { return this.context ? this.context.length : 0; }\n}\nRule.empty = new Rule([], 2 /* Mode.Normal */, null);\n/**\nDefine a [highlighter](#highlight.Highlighter) from an array of\ntag/class pairs. Classes associated with more specific tags will\ntake precedence.\n*/\nfunction tagHighlighter(tags, options) {\n    let map = Object.create(null);\n    for (let style of tags) {\n        if (!Array.isArray(style.tag))\n            map[style.tag.id] = style.class;\n        else\n            for (let tag of style.tag)\n                map[tag.id] = style.class;\n    }\n    let { scope, all = null } = options || {};\n    return {\n        style: (tags) => {\n            let cls = all;\n            for (let tag of tags) {\n                for (let sub of tag.set) {\n                    let tagClass = map[sub.id];\n                    if (tagClass) {\n                        cls = cls ? cls + \" \" + tagClass : tagClass;\n                        break;\n                    }\n                }\n            }\n            return cls;\n        },\n        scope\n    };\n}\nfunction highlightTags(highlighters, tags) {\n    let result = null;\n    for (let highlighter of highlighters) {\n        let value = highlighter.style(tags);\n        if (value)\n            result = result ? result + \" \" + value : value;\n    }\n    return result;\n}\n/**\nHighlight the given [tree](#common.Tree) with the given\n[highlighter](#highlight.Highlighter). Often, the higher-level\n[`highlightCode`](#highlight.highlightCode) function is easier to\nuse.\n*/\nfunction highlightTree(tree, highlighter, \n/**\nAssign styling to a region of the text. Will be called, in order\nof position, for any ranges where more than zero classes apply.\n`classes` is a space separated string of CSS classes.\n*/\nputStyle, \n/**\nThe start of the range to highlight.\n*/\nfrom = 0, \n/**\nThe end of the range.\n*/\nto = tree.length) {\n    let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);\n    builder.highlightRange(tree.cursor(), from, to, \"\", builder.highlighters);\n    builder.flush(to);\n}\n/**\nHighlight the given tree with the given highlighter, calling\n`putText` for every piece of text, either with a set of classes or\nwith the empty string when unstyled, and `putBreak` for every line\nbreak.\n*/\nfunction highlightCode(code, tree, highlighter, putText, putBreak, from = 0, to = code.length) {\n    let pos = from;\n    function writeTo(p, classes) {\n        if (p <= pos)\n            return;\n        for (let text = code.slice(pos, p), i = 0;;) {\n            let nextBreak = text.indexOf(\"\\n\", i);\n            let upto = nextBreak < 0 ? text.length : nextBreak;\n            if (upto > i)\n                putText(text.slice(i, upto), classes);\n            if (nextBreak < 0)\n                break;\n            putBreak();\n            i = nextBreak + 1;\n        }\n        pos = p;\n    }\n    highlightTree(tree, highlighter, (from, to, classes) => {\n        writeTo(from, \"\");\n        writeTo(to, classes);\n    }, from, to);\n    writeTo(to, \"\");\n}\nclass HighlightBuilder {\n    constructor(at, highlighters, span) {\n        this.at = at;\n        this.highlighters = highlighters;\n        this.span = span;\n        this.class = \"\";\n    }\n    startSpan(at, cls) {\n        if (cls != this.class) {\n            this.flush(at);\n            if (at > this.at)\n                this.at = at;\n            this.class = cls;\n        }\n    }\n    flush(to) {\n        if (to > this.at && this.class)\n            this.span(this.at, to, this.class);\n    }\n    highlightRange(cursor, from, to, inheritedClass, highlighters) {\n        let { type, from: start, to: end } = cursor;\n        if (start >= to || end <= from)\n            return;\n        if (type.isTop)\n            highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));\n        let cls = inheritedClass;\n        let rule = getStyleTags(cursor) || Rule.empty;\n        let tagCls = highlightTags(highlighters, rule.tags);\n        if (tagCls) {\n            if (cls)\n                cls += \" \";\n            cls += tagCls;\n            if (rule.mode == 1 /* Mode.Inherit */)\n                inheritedClass += (inheritedClass ? \" \" : \"\") + tagCls;\n        }\n        this.startSpan(Math.max(from, start), cls);\n        if (rule.opaque)\n            return;\n        let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);\n        if (mounted && mounted.overlay) {\n            let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);\n            let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));\n            let hasChild = cursor.firstChild();\n            for (let i = 0, pos = start;; i++) {\n                let next = i < mounted.overlay.length ? mounted.overlay[i] : null;\n                let nextPos = next ? next.from + start : end;\n                let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);\n                if (rangeFrom < rangeTo && hasChild) {\n                    while (cursor.from < rangeTo) {\n                        this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);\n                        this.startSpan(Math.min(rangeTo, cursor.to), cls);\n                        if (cursor.to >= nextPos || !cursor.nextSibling())\n                            break;\n                    }\n                }\n                if (!next || nextPos > to)\n                    break;\n                pos = next.to + start;\n                if (pos > from) {\n                    this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), \"\", innerHighlighters);\n                    this.startSpan(Math.min(to, pos), cls);\n                }\n            }\n            if (hasChild)\n                cursor.parent();\n        }\n        else if (cursor.firstChild()) {\n            if (mounted)\n                inheritedClass = \"\";\n            do {\n                if (cursor.to <= from)\n                    continue;\n                if (cursor.from >= to)\n                    break;\n                this.highlightRange(cursor, from, to, inheritedClass, highlighters);\n                this.startSpan(Math.min(to, cursor.to), cls);\n            } while (cursor.nextSibling());\n            cursor.parent();\n        }\n    }\n}\n/**\nMatch a syntax node's [highlight rules](#highlight.styleTags). If\nthere's a match, return its set of tags, and whether it is\nopaque (uses a `!`) or applies to all child nodes (`/...`).\n*/\nfunction getStyleTags(node) {\n    let rule = node.type.prop(ruleNodeProp);\n    while (rule && rule.context && !node.matchContext(rule.context))\n        rule = rule.next;\n    return rule || null;\n}\nconst t = Tag.define;\nconst comment = t(), name = t(), typeName = t(name), propertyName = t(name), literal = t(), string = t(literal), number = t(literal), content = t(), heading = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();\n/**\nThe default set of highlighting [tags](#highlight.Tag).\n\nThis collection is heavily biased towards programming languages,\nand necessarily incomplete. A full ontology of syntactic\nconstructs would fill a stack of books, and be impractical to\nwrite themes for. So try to make do with this set. If all else\nfails, [open an\nissue](https://github.com/codemirror/codemirror.next) to propose a\nnew tag, or [define](#highlight.Tag^define) a local custom tag for\nyour use case.\n\nNote that it is not obligatory to always attach the most specific\ntag possible to an element—if your grammar can't easily\ndistinguish a certain type of element (such as a local variable),\nit is okay to style it as its more general variant (a variable).\n\nFor tags that extend some parent tag, the documentation links to\nthe parent.\n*/\nconst tags = {\n    /**\n    A comment.\n    */\n    comment,\n    /**\n    A line [comment](#highlight.tags.comment).\n    */\n    lineComment: t(comment),\n    /**\n    A block [comment](#highlight.tags.comment).\n    */\n    blockComment: t(comment),\n    /**\n    A documentation [comment](#highlight.tags.comment).\n    */\n    docComment: t(comment),\n    /**\n    Any kind of identifier.\n    */\n    name,\n    /**\n    The [name](#highlight.tags.name) of a variable.\n    */\n    variableName: t(name),\n    /**\n    A type [name](#highlight.tags.name).\n    */\n    typeName: typeName,\n    /**\n    A tag name (subtag of [`typeName`](#highlight.tags.typeName)).\n    */\n    tagName: t(typeName),\n    /**\n    A property or field [name](#highlight.tags.name).\n    */\n    propertyName: propertyName,\n    /**\n    An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).\n    */\n    attributeName: t(propertyName),\n    /**\n    The [name](#highlight.tags.name) of a class.\n    */\n    className: t(name),\n    /**\n    A label [name](#highlight.tags.name).\n    */\n    labelName: t(name),\n    /**\n    A namespace [name](#highlight.tags.name).\n    */\n    namespace: t(name),\n    /**\n    The [name](#highlight.tags.name) of a macro.\n    */\n    macroName: t(name),\n    /**\n    A literal value.\n    */\n    literal,\n    /**\n    A string [literal](#highlight.tags.literal).\n    */\n    string,\n    /**\n    A documentation [string](#highlight.tags.string).\n    */\n    docString: t(string),\n    /**\n    A character literal (subtag of [string](#highlight.tags.string)).\n    */\n    character: t(string),\n    /**\n    An attribute value (subtag of [string](#highlight.tags.string)).\n    */\n    attributeValue: t(string),\n    /**\n    A number [literal](#highlight.tags.literal).\n    */\n    number,\n    /**\n    An integer [number](#highlight.tags.number) literal.\n    */\n    integer: t(number),\n    /**\n    A floating-point [number](#highlight.tags.number) literal.\n    */\n    float: t(number),\n    /**\n    A boolean [literal](#highlight.tags.literal).\n    */\n    bool: t(literal),\n    /**\n    Regular expression [literal](#highlight.tags.literal).\n    */\n    regexp: t(literal),\n    /**\n    An escape [literal](#highlight.tags.literal), for example a\n    backslash escape in a string.\n    */\n    escape: t(literal),\n    /**\n    A color [literal](#highlight.tags.literal).\n    */\n    color: t(literal),\n    /**\n    A URL [literal](#highlight.tags.literal).\n    */\n    url: t(literal),\n    /**\n    A language keyword.\n    */\n    keyword,\n    /**\n    The [keyword](#highlight.tags.keyword) for the self or this\n    object.\n    */\n    self: t(keyword),\n    /**\n    The [keyword](#highlight.tags.keyword) for null.\n    */\n    null: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) denoting some atomic value.\n    */\n    atom: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) that represents a unit.\n    */\n    unit: t(keyword),\n    /**\n    A modifier [keyword](#highlight.tags.keyword).\n    */\n    modifier: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) that acts as an operator.\n    */\n    operatorKeyword: t(keyword),\n    /**\n    A control-flow related [keyword](#highlight.tags.keyword).\n    */\n    controlKeyword: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) that defines something.\n    */\n    definitionKeyword: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) related to defining or\n    interfacing with modules.\n    */\n    moduleKeyword: t(keyword),\n    /**\n    An operator.\n    */\n    operator,\n    /**\n    An [operator](#highlight.tags.operator) that dereferences something.\n    */\n    derefOperator: t(operator),\n    /**\n    Arithmetic-related [operator](#highlight.tags.operator).\n    */\n    arithmeticOperator: t(operator),\n    /**\n    Logical [operator](#highlight.tags.operator).\n    */\n    logicOperator: t(operator),\n    /**\n    Bit [operator](#highlight.tags.operator).\n    */\n    bitwiseOperator: t(operator),\n    /**\n    Comparison [operator](#highlight.tags.operator).\n    */\n    compareOperator: t(operator),\n    /**\n    [Operator](#highlight.tags.operator) that updates its operand.\n    */\n    updateOperator: t(operator),\n    /**\n    [Operator](#highlight.tags.operator) that defines something.\n    */\n    definitionOperator: t(operator),\n    /**\n    Type-related [operator](#highlight.tags.operator).\n    */\n    typeOperator: t(operator),\n    /**\n    Control-flow [operator](#highlight.tags.operator).\n    */\n    controlOperator: t(operator),\n    /**\n    Program or markup punctuation.\n    */\n    punctuation,\n    /**\n    [Punctuation](#highlight.tags.punctuation) that separates\n    things.\n    */\n    separator: t(punctuation),\n    /**\n    Bracket-style [punctuation](#highlight.tags.punctuation).\n    */\n    bracket,\n    /**\n    Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`\n    tokens).\n    */\n    angleBracket: t(bracket),\n    /**\n    Square [brackets](#highlight.tags.bracket) (usually `[` and `]`\n    tokens).\n    */\n    squareBracket: t(bracket),\n    /**\n    Parentheses (usually `(` and `)` tokens). Subtag of\n    [bracket](#highlight.tags.bracket).\n    */\n    paren: t(bracket),\n    /**\n    Braces (usually `{` and `}` tokens). Subtag of\n    [bracket](#highlight.tags.bracket).\n    */\n    brace: t(bracket),\n    /**\n    Content, for example plain text in XML or markup documents.\n    */\n    content,\n    /**\n    [Content](#highlight.tags.content) that represents a heading.\n    */\n    heading,\n    /**\n    A level 1 [heading](#highlight.tags.heading).\n    */\n    heading1: t(heading),\n    /**\n    A level 2 [heading](#highlight.tags.heading).\n    */\n    heading2: t(heading),\n    /**\n    A level 3 [heading](#highlight.tags.heading).\n    */\n    heading3: t(heading),\n    /**\n    A level 4 [heading](#highlight.tags.heading).\n    */\n    heading4: t(heading),\n    /**\n    A level 5 [heading](#highlight.tags.heading).\n    */\n    heading5: t(heading),\n    /**\n    A level 6 [heading](#highlight.tags.heading).\n    */\n    heading6: t(heading),\n    /**\n    A prose separator (such as a horizontal rule).\n    */\n    contentSeparator: t(content),\n    /**\n    [Content](#highlight.tags.content) that represents a list.\n    */\n    list: t(content),\n    /**\n    [Content](#highlight.tags.content) that represents a quote.\n    */\n    quote: t(content),\n    /**\n    [Content](#highlight.tags.content) that is emphasized.\n    */\n    emphasis: t(content),\n    /**\n    [Content](#highlight.tags.content) that is styled strong.\n    */\n    strong: t(content),\n    /**\n    [Content](#highlight.tags.content) that is part of a link.\n    */\n    link: t(content),\n    /**\n    [Content](#highlight.tags.content) that is styled as code or\n    monospace.\n    */\n    monospace: t(content),\n    /**\n    [Content](#highlight.tags.content) that has a strike-through\n    style.\n    */\n    strikethrough: t(content),\n    /**\n    Inserted text in a change-tracking format.\n    */\n    inserted: t(),\n    /**\n    Deleted text.\n    */\n    deleted: t(),\n    /**\n    Changed text.\n    */\n    changed: t(),\n    /**\n    An invalid or unsyntactic element.\n    */\n    invalid: t(),\n    /**\n    Metadata or meta-instruction.\n    */\n    meta,\n    /**\n    [Metadata](#highlight.tags.meta) that applies to the entire\n    document.\n    */\n    documentMeta: t(meta),\n    /**\n    [Metadata](#highlight.tags.meta) that annotates or adds\n    attributes to a given syntactic element.\n    */\n    annotation: t(meta),\n    /**\n    Processing instruction or preprocessor directive. Subtag of\n    [meta](#highlight.tags.meta).\n    */\n    processingInstruction: t(meta),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that indicates that a\n    given element is being defined. Expected to be used with the\n    various [name](#highlight.tags.name) tags.\n    */\n    definition: Tag.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that indicates that\n    something is constant. Mostly expected to be used with\n    [variable names](#highlight.tags.variableName).\n    */\n    constant: Tag.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) used to indicate that\n    a [variable](#highlight.tags.variableName) or [property\n    name](#highlight.tags.propertyName) is being called or defined\n    as a function.\n    */\n    function: Tag.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that can be applied to\n    [names](#highlight.tags.name) to indicate that they belong to\n    the language's standard environment.\n    */\n    standard: Tag.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that indicates a given\n    [names](#highlight.tags.name) is local to some scope.\n    */\n    local: Tag.defineModifier(),\n    /**\n    A generic variant [modifier](#highlight.Tag^defineModifier) that\n    can be used to tag language-specific alternative variants of\n    some common tag. It is recommended for themes to define special\n    forms of at least the [string](#highlight.tags.string) and\n    [variable name](#highlight.tags.variableName) tags, since those\n    come up a lot.\n    */\n    special: Tag.defineModifier()\n};\n/**\nThis is a highlighter that adds stable, predictable classes to\ntokens, for styling with external CSS.\n\nThe following tags are mapped to their name prefixed with `\"tok-\"`\n(for example `\"tok-comment\"`):\n\n* [`link`](#highlight.tags.link)\n* [`heading`](#highlight.tags.heading)\n* [`emphasis`](#highlight.tags.emphasis)\n* [`strong`](#highlight.tags.strong)\n* [`keyword`](#highlight.tags.keyword)\n* [`atom`](#highlight.tags.atom)\n* [`bool`](#highlight.tags.bool)\n* [`url`](#highlight.tags.url)\n* [`labelName`](#highlight.tags.labelName)\n* [`inserted`](#highlight.tags.inserted)\n* [`deleted`](#highlight.tags.deleted)\n* [`literal`](#highlight.tags.literal)\n* [`string`](#highlight.tags.string)\n* [`number`](#highlight.tags.number)\n* [`variableName`](#highlight.tags.variableName)\n* [`typeName`](#highlight.tags.typeName)\n* [`namespace`](#highlight.tags.namespace)\n* [`className`](#highlight.tags.className)\n* [`macroName`](#highlight.tags.macroName)\n* [`propertyName`](#highlight.tags.propertyName)\n* [`operator`](#highlight.tags.operator)\n* [`comment`](#highlight.tags.comment)\n* [`meta`](#highlight.tags.meta)\n* [`punctuation`](#highlight.tags.punctuation)\n* [`invalid`](#highlight.tags.invalid)\n\nIn addition, these mappings are provided:\n\n* [`regexp`](#highlight.tags.regexp),\n  [`escape`](#highlight.tags.escape), and\n  [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)\n  are mapped to `\"tok-string2\"`\n* [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)\n  to `\"tok-variableName2\"`\n* [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)\n  to `\"tok-variableName tok-local\"`\n* [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)\n  to `\"tok-variableName tok-definition\"`\n* [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)\n  to `\"tok-propertyName tok-definition\"`\n*/\nconst classHighlighter = tagHighlighter([\n    { tag: tags.link, class: \"tok-link\" },\n    { tag: tags.heading, class: \"tok-heading\" },\n    { tag: tags.emphasis, class: \"tok-emphasis\" },\n    { tag: tags.strong, class: \"tok-strong\" },\n    { tag: tags.keyword, class: \"tok-keyword\" },\n    { tag: tags.atom, class: \"tok-atom\" },\n    { tag: tags.bool, class: \"tok-bool\" },\n    { tag: tags.url, class: \"tok-url\" },\n    { tag: tags.labelName, class: \"tok-labelName\" },\n    { tag: tags.inserted, class: \"tok-inserted\" },\n    { tag: tags.deleted, class: \"tok-deleted\" },\n    { tag: tags.literal, class: \"tok-literal\" },\n    { tag: tags.string, class: \"tok-string\" },\n    { tag: tags.number, class: \"tok-number\" },\n    { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: \"tok-string2\" },\n    { tag: tags.variableName, class: \"tok-variableName\" },\n    { tag: tags.local(tags.variableName), class: \"tok-variableName tok-local\" },\n    { tag: tags.definition(tags.variableName), class: \"tok-variableName tok-definition\" },\n    { tag: tags.special(tags.variableName), class: \"tok-variableName2\" },\n    { tag: tags.definition(tags.propertyName), class: \"tok-propertyName tok-definition\" },\n    { tag: tags.typeName, class: \"tok-typeName\" },\n    { tag: tags.namespace, class: \"tok-namespace\" },\n    { tag: tags.className, class: \"tok-className\" },\n    { tag: tags.macroName, class: \"tok-macroName\" },\n    { tag: tags.propertyName, class: \"tok-propertyName\" },\n    { tag: tags.operator, class: \"tok-operator\" },\n    { tag: tags.comment, class: \"tok-comment\" },\n    { tag: tags.meta, class: \"tok-meta\" },\n    { tag: tags.invalid, class: \"tok-invalid\" },\n    { tag: tags.punctuation, class: \"tok-punctuation\" }\n]);\n\nexport { Tag, classHighlighter, getStyleTags, highlightCode, highlightTree, styleTags, tagHighlighter, tags };\n","import { NodeProp, IterMode, Tree, TreeFragment, Parser, NodeType, NodeSet } from '@lezer/common';\nimport { StateEffect, StateField, Facet, EditorState, countColumn, combineConfig, RangeSet, RangeSetBuilder, Prec } from '@codemirror/state';\nimport { ViewPlugin, logException, EditorView, Decoration, WidgetType, gutter, GutterMarker, Direction } from '@codemirror/view';\nimport { tags, tagHighlighter, highlightTree, styleTags } from '@lezer/highlight';\nimport { StyleModule } from 'style-mod';\n\nvar _a;\n/**\nNode prop stored in a parser's top syntax node to provide the\nfacet that stores language-specific data for that language.\n*/\nconst languageDataProp = /*@__PURE__*/new NodeProp();\n/**\nHelper function to define a facet (to be added to the top syntax\nnode(s) for a language via\n[`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be\nused to associate language data with the language. You\nprobably only need this when subclassing\n[`Language`](https://codemirror.net/6/docs/ref/#language.Language).\n*/\nfunction defineLanguageFacet(baseData) {\n    return Facet.define({\n        combine: baseData ? values => values.concat(baseData) : undefined\n    });\n}\n/**\nSyntax node prop used to register sublanguages. Should be added to\nthe top level node type for the language.\n*/\nconst sublanguageProp = /*@__PURE__*/new NodeProp();\n/**\nA language object manages parsing and per-language\n[metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is\nmanaged as a [Lezer](https://lezer.codemirror.net) tree. The class\ncan be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)\nsubclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or\nvia the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass\nfor stream parsers.\n*/\nclass Language {\n    /**\n    Construct a language object. If you need to invoke this\n    directly, first define a data facet with\n    [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then\n    configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it\n    to the language's outer syntax node.\n    */\n    constructor(\n    /**\n    The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet\n    used for this language.\n    */\n    data, parser, extraExtensions = [], \n    /**\n    A language name.\n    */\n    name = \"\") {\n        this.data = data;\n        this.name = name;\n        // Kludge to define EditorState.tree as a debugging helper,\n        // without the EditorState package actually knowing about\n        // languages and lezer trees.\n        if (!EditorState.prototype.hasOwnProperty(\"tree\"))\n            Object.defineProperty(EditorState.prototype, \"tree\", { get() { return syntaxTree(this); } });\n        this.parser = parser;\n        this.extension = [\n            language.of(this),\n            EditorState.languageData.of((state, pos, side) => {\n                let top = topNodeAt(state, pos, side), data = top.type.prop(languageDataProp);\n                if (!data)\n                    return [];\n                let base = state.facet(data), sub = top.type.prop(sublanguageProp);\n                if (sub) {\n                    let innerNode = top.resolve(pos - top.from, side);\n                    for (let sublang of sub)\n                        if (sublang.test(innerNode, state)) {\n                            let data = state.facet(sublang.facet);\n                            return sublang.type == \"replace\" ? data : data.concat(base);\n                        }\n                }\n                return base;\n            })\n        ].concat(extraExtensions);\n    }\n    /**\n    Query whether this language is active at the given position.\n    */\n    isActiveAt(state, pos, side = -1) {\n        return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;\n    }\n    /**\n    Find the document regions that were parsed using this language.\n    The returned regions will _include_ any nested languages rooted\n    in this language, when those exist.\n    */\n    findRegions(state) {\n        let lang = state.facet(language);\n        if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)\n            return [{ from: 0, to: state.doc.length }];\n        if (!lang || !lang.allowsNesting)\n            return [];\n        let result = [];\n        let explore = (tree, from) => {\n            if (tree.prop(languageDataProp) == this.data) {\n                result.push({ from, to: from + tree.length });\n                return;\n            }\n            let mount = tree.prop(NodeProp.mounted);\n            if (mount) {\n                if (mount.tree.prop(languageDataProp) == this.data) {\n                    if (mount.overlay)\n                        for (let r of mount.overlay)\n                            result.push({ from: r.from + from, to: r.to + from });\n                    else\n                        result.push({ from: from, to: from + tree.length });\n                    return;\n                }\n                else if (mount.overlay) {\n                    let size = result.length;\n                    explore(mount.tree, mount.overlay[0].from + from);\n                    if (result.length > size)\n                        return;\n                }\n            }\n            for (let i = 0; i < tree.children.length; i++) {\n                let ch = tree.children[i];\n                if (ch instanceof Tree)\n                    explore(ch, tree.positions[i] + from);\n            }\n        };\n        explore(syntaxTree(state), 0);\n        return result;\n    }\n    /**\n    Indicates whether this language allows nested languages. The\n    default implementation returns true.\n    */\n    get allowsNesting() { return true; }\n}\n/**\n@internal\n*/\nLanguage.setState = /*@__PURE__*/StateEffect.define();\nfunction topNodeAt(state, pos, side) {\n    let topLang = state.facet(language), tree = syntaxTree(state).topNode;\n    if (!topLang || topLang.allowsNesting) {\n        for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))\n            if (node.type.isTop)\n                tree = node;\n    }\n    return tree;\n}\n/**\nA subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer\n[LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)\nparsers.\n*/\nclass LRLanguage extends Language {\n    constructor(data, parser, name) {\n        super(data, parser, [], name);\n        this.parser = parser;\n    }\n    /**\n    Define a language from a parser.\n    */\n    static define(spec) {\n        let data = defineLanguageFacet(spec.languageData);\n        return new LRLanguage(data, spec.parser.configure({\n            props: [languageDataProp.add(type => type.isTop ? data : undefined)]\n        }), spec.name);\n    }\n    /**\n    Create a new instance of this language with a reconfigured\n    version of its parser and optionally a new name.\n    */\n    configure(options, name) {\n        return new LRLanguage(this.data, this.parser.configure(options), name || this.name);\n    }\n    get allowsNesting() { return this.parser.hasWrappers(); }\n}\n/**\nGet the syntax tree for a state, which is the current (possibly\nincomplete) parse tree of the active\n[language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no\nlanguage available.\n*/\nfunction syntaxTree(state) {\n    let field = state.field(Language.state, false);\n    return field ? field.tree : Tree.empty;\n}\n/**\nTry to get a parse tree that spans at least up to `upto`. The\nmethod will do at most `timeout` milliseconds of work to parse\nup to that point if the tree isn't already available.\n*/\nfunction ensureSyntaxTree(state, upto, timeout = 50) {\n    var _a;\n    let parse = (_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context;\n    if (!parse)\n        return null;\n    let oldVieport = parse.viewport;\n    parse.updateViewport({ from: 0, to: upto });\n    let result = parse.isDone(upto) || parse.work(timeout, upto) ? parse.tree : null;\n    parse.updateViewport(oldVieport);\n    return result;\n}\n/**\nQueries whether there is a full syntax tree available up to the\ngiven document position. If there isn't, the background parse\nprocess _might_ still be working and update the tree further, but\nthere is no guarantee of that—the parser will [stop\nworking](https://codemirror.net/6/docs/ref/#language.syntaxParserRunning) when it has spent a\ncertain amount of time or has moved beyond the visible viewport.\nAlways returns false if no language has been enabled.\n*/\nfunction syntaxTreeAvailable(state, upto = state.doc.length) {\n    var _a;\n    return ((_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context.isDone(upto)) || false;\n}\n/**\nMove parsing forward, and update the editor state afterwards to\nreflect the new tree. Will work for at most `timeout`\nmilliseconds. Returns true if the parser managed get to the given\nposition in that time.\n*/\nfunction forceParsing(view, upto = view.viewport.to, timeout = 100) {\n    let success = ensureSyntaxTree(view.state, upto, timeout);\n    if (success != syntaxTree(view.state))\n        view.dispatch({});\n    return !!success;\n}\n/**\nTells you whether the language parser is planning to do more\nparsing work (in a `requestIdleCallback` pseudo-thread) or has\nstopped running, either because it parsed the entire document,\nbecause it spent too much time and was cut off, or because there\nis no language parser enabled.\n*/\nfunction syntaxParserRunning(view) {\n    var _a;\n    return ((_a = view.plugin(parseWorker)) === null || _a === void 0 ? void 0 : _a.isWorking()) || false;\n}\n/**\nLezer-style\n[`Input`](https://lezer.codemirror.net/docs/ref#common.Input)\nobject for a [`Text`](https://codemirror.net/6/docs/ref/#state.Text) object.\n*/\nclass DocInput {\n    /**\n    Create an input object for the given document.\n    */\n    constructor(doc) {\n        this.doc = doc;\n        this.cursorPos = 0;\n        this.string = \"\";\n        this.cursor = doc.iter();\n    }\n    get length() { return this.doc.length; }\n    syncTo(pos) {\n        this.string = this.cursor.next(pos - this.cursorPos).value;\n        this.cursorPos = pos + this.string.length;\n        return this.cursorPos - this.string.length;\n    }\n    chunk(pos) {\n        this.syncTo(pos);\n        return this.string;\n    }\n    get lineChunks() { return true; }\n    read(from, to) {\n        let stringStart = this.cursorPos - this.string.length;\n        if (from < stringStart || to >= this.cursorPos)\n            return this.doc.sliceString(from, to);\n        else\n            return this.string.slice(from - stringStart, to - stringStart);\n    }\n}\nlet currentContext = null;\n/**\nA parse context provided to parsers working on the editor content.\n*/\nclass ParseContext {\n    constructor(parser, \n    /**\n    The current editor state.\n    */\n    state, \n    /**\n    Tree fragments that can be reused by incremental re-parses.\n    */\n    fragments = [], \n    /**\n    @internal\n    */\n    tree, \n    /**\n    @internal\n    */\n    treeLen, \n    /**\n    The current editor viewport (or some overapproximation\n    thereof). Intended to be used for opportunistically avoiding\n    work (in which case\n    [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)\n    should be called to make sure the parser is restarted when the\n    skipped region becomes visible).\n    */\n    viewport, \n    /**\n    @internal\n    */\n    skipped, \n    /**\n    This is where skipping parsers can register a promise that,\n    when resolved, will schedule a new parse. It is cleared when\n    the parse worker picks up the promise. @internal\n    */\n    scheduleOn) {\n        this.parser = parser;\n        this.state = state;\n        this.fragments = fragments;\n        this.tree = tree;\n        this.treeLen = treeLen;\n        this.viewport = viewport;\n        this.skipped = skipped;\n        this.scheduleOn = scheduleOn;\n        this.parse = null;\n        /**\n        @internal\n        */\n        this.tempSkipped = [];\n    }\n    /**\n    @internal\n    */\n    static create(parser, state, viewport) {\n        return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);\n    }\n    startParse() {\n        return this.parser.startParse(new DocInput(this.state.doc), this.fragments);\n    }\n    /**\n    @internal\n    */\n    work(until, upto) {\n        if (upto != null && upto >= this.state.doc.length)\n            upto = undefined;\n        if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {\n            this.takeTree();\n            return true;\n        }\n        return this.withContext(() => {\n            var _a;\n            if (typeof until == \"number\") {\n                let endTime = Date.now() + until;\n                until = () => Date.now() > endTime;\n            }\n            if (!this.parse)\n                this.parse = this.startParse();\n            if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&\n                upto < this.state.doc.length)\n                this.parse.stopAt(upto);\n            for (;;) {\n                let done = this.parse.advance();\n                if (done) {\n                    this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));\n                    this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;\n                    this.tree = done;\n                    this.parse = null;\n                    if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))\n                        this.parse = this.startParse();\n                    else\n                        return true;\n                }\n                if (until())\n                    return false;\n            }\n        });\n    }\n    /**\n    @internal\n    */\n    takeTree() {\n        let pos, tree;\n        if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {\n            if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)\n                this.parse.stopAt(pos);\n            this.withContext(() => { while (!(tree = this.parse.advance())) { } });\n            this.treeLen = pos;\n            this.tree = tree;\n            this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));\n            this.parse = null;\n        }\n    }\n    withContext(f) {\n        let prev = currentContext;\n        currentContext = this;\n        try {\n            return f();\n        }\n        finally {\n            currentContext = prev;\n        }\n    }\n    withoutTempSkipped(fragments) {\n        for (let r; r = this.tempSkipped.pop();)\n            fragments = cutFragments(fragments, r.from, r.to);\n        return fragments;\n    }\n    /**\n    @internal\n    */\n    changes(changes, newState) {\n        let { fragments, tree, treeLen, viewport, skipped } = this;\n        this.takeTree();\n        if (!changes.empty) {\n            let ranges = [];\n            changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));\n            fragments = TreeFragment.applyChanges(fragments, ranges);\n            tree = Tree.empty;\n            treeLen = 0;\n            viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };\n            if (this.skipped.length) {\n                skipped = [];\n                for (let r of this.skipped) {\n                    let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);\n                    if (from < to)\n                        skipped.push({ from, to });\n                }\n            }\n        }\n        return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);\n    }\n    /**\n    @internal\n    */\n    updateViewport(viewport) {\n        if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)\n            return false;\n        this.viewport = viewport;\n        let startLen = this.skipped.length;\n        for (let i = 0; i < this.skipped.length; i++) {\n            let { from, to } = this.skipped[i];\n            if (from < viewport.to && to > viewport.from) {\n                this.fragments = cutFragments(this.fragments, from, to);\n                this.skipped.splice(i--, 1);\n            }\n        }\n        if (this.skipped.length >= startLen)\n            return false;\n        this.reset();\n        return true;\n    }\n    /**\n    @internal\n    */\n    reset() {\n        if (this.parse) {\n            this.takeTree();\n            this.parse = null;\n        }\n    }\n    /**\n    Notify the parse scheduler that the given region was skipped\n    because it wasn't in view, and the parse should be restarted\n    when it comes into view.\n    */\n    skipUntilInView(from, to) {\n        this.skipped.push({ from, to });\n    }\n    /**\n    Returns a parser intended to be used as placeholder when\n    asynchronously loading a nested parser. It'll skip its input and\n    mark it as not-really-parsed, so that the next update will parse\n    it again.\n    \n    When `until` is given, a reparse will be scheduled when that\n    promise resolves.\n    */\n    static getSkippingParser(until) {\n        return new class extends Parser {\n            createParse(input, fragments, ranges) {\n                let from = ranges[0].from, to = ranges[ranges.length - 1].to;\n                let parser = {\n                    parsedPos: from,\n                    advance() {\n                        let cx = currentContext;\n                        if (cx) {\n                            for (let r of ranges)\n                                cx.tempSkipped.push(r);\n                            if (until)\n                                cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;\n                        }\n                        this.parsedPos = to;\n                        return new Tree(NodeType.none, [], [], to - from);\n                    },\n                    stoppedAt: null,\n                    stopAt() { }\n                };\n                return parser;\n            }\n        };\n    }\n    /**\n    @internal\n    */\n    isDone(upto) {\n        upto = Math.min(upto, this.state.doc.length);\n        let frags = this.fragments;\n        return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;\n    }\n    /**\n    Get the context for the current parse, or `null` if no editor\n    parse is in progress.\n    */\n    static get() { return currentContext; }\n}\nfunction cutFragments(fragments, from, to) {\n    return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);\n}\nclass LanguageState {\n    constructor(\n    // A mutable parse state that is used to preserve work done during\n    // the lifetime of a state when moving to the next state.\n    context) {\n        this.context = context;\n        this.tree = context.tree;\n    }\n    apply(tr) {\n        if (!tr.docChanged && this.tree == this.context.tree)\n            return this;\n        let newCx = this.context.changes(tr.changes, tr.state);\n        // If the previous parse wasn't done, go forward only up to its\n        // end position or the end of the viewport, to avoid slowing down\n        // state updates with parse work beyond the viewport.\n        let upto = this.context.treeLen == tr.startState.doc.length ? undefined\n            : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);\n        if (!newCx.work(20 /* Work.Apply */, upto))\n            newCx.takeTree();\n        return new LanguageState(newCx);\n    }\n    static init(state) {\n        let vpTo = Math.min(3000 /* Work.InitViewport */, state.doc.length);\n        let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });\n        if (!parseState.work(20 /* Work.Apply */, vpTo))\n            parseState.takeTree();\n        return new LanguageState(parseState);\n    }\n}\nLanguage.state = /*@__PURE__*/StateField.define({\n    create: LanguageState.init,\n    update(value, tr) {\n        for (let e of tr.effects)\n            if (e.is(Language.setState))\n                return e.value;\n        if (tr.startState.facet(language) != tr.state.facet(language))\n            return LanguageState.init(tr.state);\n        return value.apply(tr);\n    }\n});\nlet requestIdle = (callback) => {\n    let timeout = setTimeout(() => callback(), 500 /* Work.MaxPause */);\n    return () => clearTimeout(timeout);\n};\nif (typeof requestIdleCallback != \"undefined\")\n    requestIdle = (callback) => {\n        let idle = -1, timeout = setTimeout(() => {\n            idle = requestIdleCallback(callback, { timeout: 500 /* Work.MaxPause */ - 100 /* Work.MinPause */ });\n        }, 100 /* Work.MinPause */);\n        return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);\n    };\nconst isInputPending = typeof navigator != \"undefined\" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending)\n    ? () => navigator.scheduling.isInputPending() : null;\nconst parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {\n    constructor(view) {\n        this.view = view;\n        this.working = null;\n        this.workScheduled = 0;\n        // End of the current time chunk\n        this.chunkEnd = -1;\n        // Milliseconds of budget left for this chunk\n        this.chunkBudget = -1;\n        this.work = this.work.bind(this);\n        this.scheduleWork();\n    }\n    update(update) {\n        let cx = this.view.state.field(Language.state).context;\n        if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)\n            this.scheduleWork();\n        if (update.docChanged || update.selectionSet) {\n            if (this.view.hasFocus)\n                this.chunkBudget += 50 /* Work.ChangeBonus */;\n            this.scheduleWork();\n        }\n        this.checkAsyncSchedule(cx);\n    }\n    scheduleWork() {\n        if (this.working)\n            return;\n        let { state } = this.view, field = state.field(Language.state);\n        if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))\n            this.working = requestIdle(this.work);\n    }\n    work(deadline) {\n        this.working = null;\n        let now = Date.now();\n        if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk\n            this.chunkEnd = now + 30000 /* Work.ChunkTime */;\n            this.chunkBudget = 3000 /* Work.ChunkBudget */;\n        }\n        if (this.chunkBudget <= 0)\n            return; // No more budget\n        let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);\n        if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* Work.MaxParseAhead */))\n            return;\n        let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Work.Slice */, deadline && !isInputPending ? Math.max(25 /* Work.MinSlice */, deadline.timeRemaining() - 5) : 1e9);\n        let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;\n        let done = field.context.work(() => {\n            return isInputPending && isInputPending() || Date.now() > endTime;\n        }, vpTo + (viewportFirst ? 0 : 100000 /* Work.MaxParseAhead */));\n        this.chunkBudget -= Date.now() - now;\n        if (done || this.chunkBudget <= 0) {\n            field.context.takeTree();\n            this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });\n        }\n        if (this.chunkBudget > 0 && !(done && !viewportFirst))\n            this.scheduleWork();\n        this.checkAsyncSchedule(field.context);\n    }\n    checkAsyncSchedule(cx) {\n        if (cx.scheduleOn) {\n            this.workScheduled++;\n            cx.scheduleOn\n                .then(() => this.scheduleWork())\n                .catch(err => logException(this.view.state, err))\n                .then(() => this.workScheduled--);\n            cx.scheduleOn = null;\n        }\n    }\n    destroy() {\n        if (this.working)\n            this.working();\n    }\n    isWorking() {\n        return !!(this.working || this.workScheduled > 0);\n    }\n}, {\n    eventHandlers: { focus() { this.scheduleWork(); } }\n});\n/**\nThe facet used to associate a language with an editor state. Used\nby `Language` object's `extension` property (so you don't need to\nmanually wrap your languages in this). Can be used to access the\ncurrent language on a state.\n*/\nconst language = /*@__PURE__*/Facet.define({\n    combine(languages) { return languages.length ? languages[0] : null; },\n    enables: language => [\n        Language.state,\n        parseWorker,\n        EditorView.contentAttributes.compute([language], state => {\n            let lang = state.facet(language);\n            return lang && lang.name ? { \"data-language\": lang.name } : {};\n        })\n    ]\n});\n/**\nThis class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an\noptional set of supporting extensions. Language packages are\nencouraged to export a function that optionally takes a\nconfiguration object and returns a `LanguageSupport` instance, as\nthe main way for client code to use the package.\n*/\nclass LanguageSupport {\n    /**\n    Create a language support object.\n    */\n    constructor(\n    /**\n    The language object.\n    */\n    language, \n    /**\n    An optional set of supporting extensions. When nesting a\n    language in another language, the outer language is encouraged\n    to include the supporting extensions for its inner languages\n    in its own set of support extensions.\n    */\n    support = []) {\n        this.language = language;\n        this.support = support;\n        this.extension = [language, support];\n    }\n}\n/**\nLanguage descriptions are used to store metadata about languages\nand to dynamically load them. Their main role is finding the\nappropriate language for a filename or dynamically loading nested\nparsers.\n*/\nclass LanguageDescription {\n    constructor(\n    /**\n    The name of this language.\n    */\n    name, \n    /**\n    Alternative names for the mode (lowercased, includes `this.name`).\n    */\n    alias, \n    /**\n    File extensions associated with this language.\n    */\n    extensions, \n    /**\n    Optional filename pattern that should be associated with this\n    language.\n    */\n    filename, loadFunc, \n    /**\n    If the language has been loaded, this will hold its value.\n    */\n    support = undefined) {\n        this.name = name;\n        this.alias = alias;\n        this.extensions = extensions;\n        this.filename = filename;\n        this.loadFunc = loadFunc;\n        this.support = support;\n        this.loading = null;\n    }\n    /**\n    Start loading the the language. Will return a promise that\n    resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)\n    object when the language successfully loads.\n    */\n    load() {\n        return this.loading || (this.loading = this.loadFunc().then(support => this.support = support, err => { this.loading = null; throw err; }));\n    }\n    /**\n    Create a language description.\n    */\n    static of(spec) {\n        let { load, support } = spec;\n        if (!load) {\n            if (!support)\n                throw new RangeError(\"Must pass either 'load' or 'support' to LanguageDescription.of\");\n            load = () => Promise.resolve(support);\n        }\n        return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(s => s.toLowerCase()), spec.extensions || [], spec.filename, load, support);\n    }\n    /**\n    Look for a language in the given array of descriptions that\n    matches the filename. Will first match\n    [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,\n    and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),\n    and return the first language that matches.\n    */\n    static matchFilename(descs, filename) {\n        for (let d of descs)\n            if (d.filename && d.filename.test(filename))\n                return d;\n        let ext = /\\.([^.]+)$/.exec(filename);\n        if (ext)\n            for (let d of descs)\n                if (d.extensions.indexOf(ext[1]) > -1)\n                    return d;\n        return null;\n    }\n    /**\n    Look for a language whose name or alias matches the the given\n    name (case-insensitively). If `fuzzy` is true, and no direct\n    matchs is found, this'll also search for a language whose name\n    or alias occurs in the string (for names shorter than three\n    characters, only when surrounded by non-word characters).\n    */\n    static matchLanguageName(descs, name, fuzzy = true) {\n        name = name.toLowerCase();\n        for (let d of descs)\n            if (d.alias.some(a => a == name))\n                return d;\n        if (fuzzy)\n            for (let d of descs)\n                for (let a of d.alias) {\n                    let found = name.indexOf(a);\n                    if (found > -1 && (a.length > 2 || !/\\w/.test(name[found - 1]) && !/\\w/.test(name[found + a.length])))\n                        return d;\n                }\n        return null;\n    }\n}\n\n/**\nFacet that defines a way to provide a function that computes the\nappropriate indentation depth, as a column number (see\n[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given\nline. A return value of `null` indicates no indentation can be\ndetermined, and the line should inherit the indentation of the one\nabove it. A return value of `undefined` defers to the next indent\nservice.\n*/\nconst indentService = /*@__PURE__*/Facet.define();\n/**\nFacet for overriding the unit by which indentation happens. Should\nbe a string consisting either entirely of the same whitespace\ncharacter. When not set, this defaults to 2 spaces.\n*/\nconst indentUnit = /*@__PURE__*/Facet.define({\n    combine: values => {\n        if (!values.length)\n            return \"  \";\n        let unit = values[0];\n        if (!unit || /\\S/.test(unit) || Array.from(unit).some(e => e != unit[0]))\n            throw new Error(\"Invalid indent unit: \" + JSON.stringify(values[0]));\n        return unit;\n    }\n});\n/**\nReturn the _column width_ of an indent unit in the state.\nDetermined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)\nfacet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that\ncontains tabs.\n*/\nfunction getIndentUnit(state) {\n    let unit = state.facet(indentUnit);\n    return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;\n}\n/**\nCreate an indentation string that covers columns 0 to `cols`.\nWill use tabs for as much of the columns as possible when the\n[`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains\ntabs.\n*/\nfunction indentString(state, cols) {\n    let result = \"\", ts = state.tabSize, ch = state.facet(indentUnit)[0];\n    if (ch == \"\\t\") {\n        while (cols >= ts) {\n            result += \"\\t\";\n            cols -= ts;\n        }\n        ch = \" \";\n    }\n    for (let i = 0; i < cols; i++)\n        result += ch;\n    return result;\n}\n/**\nGet the indentation, as a column number, at the given position.\nWill first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)\nthat are registered, and if none of those return an indentation,\nthis will check the syntax tree for the [indent node\nprop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a\nnumber when an indentation could be determined, and null\notherwise.\n*/\nfunction getIndentation(context, pos) {\n    if (context instanceof EditorState)\n        context = new IndentContext(context);\n    for (let service of context.state.facet(indentService)) {\n        let result = service(context, pos);\n        if (result !== undefined)\n            return result;\n    }\n    let tree = syntaxTree(context.state);\n    return tree.length >= pos ? syntaxIndentation(context, tree, pos) : null;\n}\n/**\nCreate a change set that auto-indents all lines touched by the\ngiven document range.\n*/\nfunction indentRange(state, from, to) {\n    let updated = Object.create(null);\n    let context = new IndentContext(state, { overrideIndentation: start => { var _a; return (_a = updated[start]) !== null && _a !== void 0 ? _a : -1; } });\n    let changes = [];\n    for (let pos = from; pos <= to;) {\n        let line = state.doc.lineAt(pos);\n        pos = line.to + 1;\n        let indent = getIndentation(context, line.from);\n        if (indent == null)\n            continue;\n        if (!/\\S/.test(line.text))\n            indent = 0;\n        let cur = /^\\s*/.exec(line.text)[0];\n        let norm = indentString(state, indent);\n        if (cur != norm) {\n            updated[line.from] = indent;\n            changes.push({ from: line.from, to: line.from + cur.length, insert: norm });\n        }\n    }\n    return state.changes(changes);\n}\n/**\nIndentation contexts are used when calling [indentation\nservices](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities\nuseful in indentation logic, and can selectively override the\nindentation reported for some lines.\n*/\nclass IndentContext {\n    /**\n    Create an indent context.\n    */\n    constructor(\n    /**\n    The editor state.\n    */\n    state, \n    /**\n    @internal\n    */\n    options = {}) {\n        this.state = state;\n        this.options = options;\n        this.unit = getIndentUnit(state);\n    }\n    /**\n    Get a description of the line at the given position, taking\n    [simulated line\n    breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n    into account. If there is such a break at `pos`, the `bias`\n    argument determines whether the part of the line line before or\n    after the break is used.\n    */\n    lineAt(pos, bias = 1) {\n        let line = this.state.doc.lineAt(pos);\n        let { simulateBreak, simulateDoubleBreak } = this.options;\n        if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {\n            if (simulateDoubleBreak && simulateBreak == pos)\n                return { text: \"\", from: pos };\n            else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)\n                return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };\n            else\n                return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };\n        }\n        return line;\n    }\n    /**\n    Get the text directly after `pos`, either the entire line\n    or the next 100 characters, whichever is shorter.\n    */\n    textAfterPos(pos, bias = 1) {\n        if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)\n            return \"\";\n        let { text, from } = this.lineAt(pos, bias);\n        return text.slice(pos - from, Math.min(text.length, pos + 100 - from));\n    }\n    /**\n    Find the column for the given position.\n    */\n    column(pos, bias = 1) {\n        let { text, from } = this.lineAt(pos, bias);\n        let result = this.countColumn(text, pos - from);\n        let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;\n        if (override > -1)\n            result += override - this.countColumn(text, text.search(/\\S|$/));\n        return result;\n    }\n    /**\n    Find the column position (taking tabs into account) of the given\n    position in the given string.\n    */\n    countColumn(line, pos = line.length) {\n        return countColumn(line, this.state.tabSize, pos);\n    }\n    /**\n    Find the indentation column of the line at the given point.\n    */\n    lineIndent(pos, bias = 1) {\n        let { text, from } = this.lineAt(pos, bias);\n        let override = this.options.overrideIndentation;\n        if (override) {\n            let overriden = override(from);\n            if (overriden > -1)\n                return overriden;\n        }\n        return this.countColumn(text, text.search(/\\S|$/));\n    }\n    /**\n    Returns the [simulated line\n    break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n    for this context, if any.\n    */\n    get simulatedBreak() {\n        return this.options.simulateBreak || null;\n    }\n}\n/**\nA syntax tree node prop used to associate indentation strategies\nwith node types. Such a strategy is a function from an indentation\ncontext to a column number (see also\n[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null\nindicates that no definitive indentation can be determined.\n*/\nconst indentNodeProp = /*@__PURE__*/new NodeProp();\n// Compute the indentation for a given position from the syntax tree.\nfunction syntaxIndentation(cx, ast, pos) {\n    let stack = ast.resolveStack(pos);\n    let inner = stack.node.enterUnfinishedNodesBefore(pos);\n    if (inner != stack.node) {\n        let add = [];\n        for (let cur = inner; cur != stack.node; cur = cur.parent)\n            add.push(cur);\n        for (let i = add.length - 1; i >= 0; i--)\n            stack = { node: add[i], next: stack };\n    }\n    return indentFor(stack, cx, pos);\n}\nfunction indentFor(stack, cx, pos) {\n    for (let cur = stack; cur; cur = cur.next) {\n        let strategy = indentStrategy(cur.node);\n        if (strategy)\n            return strategy(TreeIndentContext.create(cx, pos, cur));\n    }\n    return 0;\n}\nfunction ignoreClosed(cx) {\n    return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;\n}\nfunction indentStrategy(tree) {\n    let strategy = tree.type.prop(indentNodeProp);\n    if (strategy)\n        return strategy;\n    let first = tree.firstChild, close;\n    if (first && (close = first.type.prop(NodeProp.closedBy))) {\n        let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;\n        return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);\n    }\n    return tree.parent == null ? topIndent : null;\n}\nfunction topIndent() { return 0; }\n/**\nObjects of this type provide context information and helper\nmethods to indentation functions registered on syntax nodes.\n*/\nclass TreeIndentContext extends IndentContext {\n    constructor(base, \n    /**\n    The position at which indentation is being computed.\n    */\n    pos, \n    /**\n    @internal\n    */\n    context) {\n        super(base.state, base.options);\n        this.base = base;\n        this.pos = pos;\n        this.context = context;\n    }\n    /**\n    The syntax tree node to which the indentation strategy\n    applies.\n    */\n    get node() { return this.context.node; }\n    /**\n    @internal\n    */\n    static create(base, pos, context) {\n        return new TreeIndentContext(base, pos, context);\n    }\n    /**\n    Get the text directly after `this.pos`, either the entire line\n    or the next 100 characters, whichever is shorter.\n    */\n    get textAfter() {\n        return this.textAfterPos(this.pos);\n    }\n    /**\n    Get the indentation at the reference line for `this.node`, which\n    is the line on which it starts, unless there is a node that is\n    _not_ a parent of this node covering the start of that line. If\n    so, the line at the start of that node is tried, again skipping\n    on if it is covered by another such node.\n    */\n    get baseIndent() {\n        return this.baseIndentFor(this.node);\n    }\n    /**\n    Get the indentation for the reference line of the given node\n    (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).\n    */\n    baseIndentFor(node) {\n        let line = this.state.doc.lineAt(node.from);\n        // Skip line starts that are covered by a sibling (or cousin, etc)\n        for (;;) {\n            let atBreak = node.resolve(line.from);\n            while (atBreak.parent && atBreak.parent.from == atBreak.from)\n                atBreak = atBreak.parent;\n            if (isParent(atBreak, node))\n                break;\n            line = this.state.doc.lineAt(atBreak.from);\n        }\n        return this.lineIndent(line.from);\n    }\n    /**\n    Continue looking for indentations in the node's parent nodes,\n    and return the result of that.\n    */\n    continue() {\n        return indentFor(this.context.next, this.base, this.pos);\n    }\n}\nfunction isParent(parent, of) {\n    for (let cur = of; cur; cur = cur.parent)\n        if (parent == cur)\n            return true;\n    return false;\n}\n// Check whether a delimited node is aligned (meaning there are\n// non-skipped nodes on the same line as the opening delimiter). And\n// if so, return the opening token.\nfunction bracketedAligned(context) {\n    let tree = context.node;\n    let openToken = tree.childAfter(tree.from), last = tree.lastChild;\n    if (!openToken)\n        return null;\n    let sim = context.options.simulateBreak;\n    let openLine = context.state.doc.lineAt(openToken.from);\n    let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);\n    for (let pos = openToken.to;;) {\n        let next = tree.childAfter(pos);\n        if (!next || next == last)\n            return null;\n        if (!next.type.isSkipped)\n            return next.from < lineEnd ? openToken : null;\n        pos = next.to;\n    }\n}\n/**\nAn indentation strategy for delimited (usually bracketed) nodes.\nWill, by default, indent one unit more than the parent's base\nindent unless the line starts with a closing token. When `align`\nis true and there are non-skipped nodes on the node's opening\nline, the content of the node will be aligned with the end of the\nopening node, like this:\n\n    foo(bar,\n        baz)\n*/\nfunction delimitedIndent({ closing, align = true, units = 1 }) {\n    return (context) => delimitedStrategy(context, align, units, closing);\n}\nfunction delimitedStrategy(context, align, units, closing, closedAt) {\n    let after = context.textAfter, space = after.match(/^\\s*/)[0].length;\n    let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;\n    let aligned = align ? bracketedAligned(context) : null;\n    if (aligned)\n        return closed ? context.column(aligned.from) : context.column(aligned.to);\n    return context.baseIndent + (closed ? 0 : context.unit * units);\n}\n/**\nAn indentation strategy that aligns a node's content to its base\nindentation.\n*/\nconst flatIndent = (context) => context.baseIndent;\n/**\nCreates an indentation strategy that, by default, indents\ncontinued lines one unit more than the node's base indentation.\nYou can provide `except` to prevent indentation of lines that\nmatch a pattern (for example `/^else\\b/` in `if`/`else`\nconstructs), and you can change the amount of units used with the\n`units` option.\n*/\nfunction continuedIndent({ except, units = 1 } = {}) {\n    return (context) => {\n        let matchExcept = except && except.test(context.textAfter);\n        return context.baseIndent + (matchExcept ? 0 : units * context.unit);\n    };\n}\nconst DontIndentBeyond = 200;\n/**\nEnables reindentation on input. When a language defines an\n`indentOnInput` field in its [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular\nexpression, the line at the cursor will be reindented whenever new\ntext is typed and the input from the start of the line up to the\ncursor matches that regexp.\n\nTo avoid unneccesary reindents, it is recommended to start the\nregexp with `^` (usually followed by `\\s*`), and end it with `$`.\nFor example, `/^\\s*\\}$/` will reindent when a closing brace is\nadded at the start of a line.\n*/\nfunction indentOnInput() {\n    return EditorState.transactionFilter.of(tr => {\n        if (!tr.docChanged || !tr.isUserEvent(\"input.type\") && !tr.isUserEvent(\"input.complete\"))\n            return tr;\n        let rules = tr.startState.languageDataAt(\"indentOnInput\", tr.startState.selection.main.head);\n        if (!rules.length)\n            return tr;\n        let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);\n        if (head > line.from + DontIndentBeyond)\n            return tr;\n        let lineStart = doc.sliceString(line.from, head);\n        if (!rules.some(r => r.test(lineStart)))\n            return tr;\n        let { state } = tr, last = -1, changes = [];\n        for (let { head } of state.selection.ranges) {\n            let line = state.doc.lineAt(head);\n            if (line.from == last)\n                continue;\n            last = line.from;\n            let indent = getIndentation(state, line.from);\n            if (indent == null)\n                continue;\n            let cur = /^\\s*/.exec(line.text)[0];\n            let norm = indentString(state, indent);\n            if (cur != norm)\n                changes.push({ from: line.from, to: line.from + cur.length, insert: norm });\n        }\n        return changes.length ? [tr, { changes, sequential: true }] : tr;\n    });\n}\n\n/**\nA facet that registers a code folding service. When called with\nthe extent of a line, such a function should return a foldable\nrange that starts on that line (but continues beyond it), if one\ncan be found.\n*/\nconst foldService = /*@__PURE__*/Facet.define();\n/**\nThis node prop is used to associate folding information with\nsyntax node types. Given a syntax node, it should check whether\nthat tree is foldable and return the range that can be collapsed\nwhen it is.\n*/\nconst foldNodeProp = /*@__PURE__*/new NodeProp();\n/**\n[Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but\nthe first and the last child of a syntax node. Useful for nodes\nthat start and end with delimiters.\n*/\nfunction foldInside(node) {\n    let first = node.firstChild, last = node.lastChild;\n    return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;\n}\nfunction syntaxFolding(state, start, end) {\n    let tree = syntaxTree(state);\n    if (tree.length < end)\n        return null;\n    let stack = tree.resolveStack(end, 1);\n    let found = null;\n    for (let iter = stack; iter; iter = iter.next) {\n        let cur = iter.node;\n        if (cur.to <= end || cur.from > end)\n            continue;\n        if (found && cur.from < start)\n            break;\n        let prop = cur.type.prop(foldNodeProp);\n        if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {\n            let value = prop(cur, state);\n            if (value && value.from <= end && value.from >= start && value.to > end)\n                found = value;\n        }\n    }\n    return found;\n}\nfunction isUnfinished(node) {\n    let ch = node.lastChild;\n    return ch && ch.to == node.to && ch.type.isError;\n}\n/**\nCheck whether the given line is foldable. First asks any fold\nservices registered through\n[`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return\na result, tries to query the [fold node\nprop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end\nof the line.\n*/\nfunction foldable(state, lineStart, lineEnd) {\n    for (let service of state.facet(foldService)) {\n        let result = service(state, lineStart, lineEnd);\n        if (result)\n            return result;\n    }\n    return syntaxFolding(state, lineStart, lineEnd);\n}\nfunction mapRange(range, mapping) {\n    let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);\n    return from >= to ? undefined : { from, to };\n}\n/**\nState effect that can be attached to a transaction to fold the\ngiven range. (You probably only need this in exceptional\ncircumstances—usually you'll just want to let\n[`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold\ngutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)\n*/\nconst foldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });\n/**\nState effect that unfolds the given range (if it was folded).\n*/\nconst unfoldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });\nfunction selectedLines(view) {\n    let lines = [];\n    for (let { head } of view.state.selection.ranges) {\n        if (lines.some(l => l.from <= head && l.to >= head))\n            continue;\n        lines.push(view.lineBlockAt(head));\n    }\n    return lines;\n}\n/**\nThe state field that stores the folded ranges (as a [decoration\nset](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to\n[`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and\n[`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold\nstate.\n*/\nconst foldState = /*@__PURE__*/StateField.define({\n    create() {\n        return Decoration.none;\n    },\n    update(folded, tr) {\n        folded = folded.map(tr.changes);\n        for (let e of tr.effects) {\n            if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) {\n                let { preparePlaceholder } = tr.state.facet(foldConfig);\n                let widget = !preparePlaceholder ? foldWidget :\n                    Decoration.replace({ widget: new PreparedFoldWidget(preparePlaceholder(tr.state, e.value)) });\n                folded = folded.update({ add: [widget.range(e.value.from, e.value.to)] });\n            }\n            else if (e.is(unfoldEffect)) {\n                folded = folded.update({ filter: (from, to) => e.value.from != from || e.value.to != to,\n                    filterFrom: e.value.from, filterTo: e.value.to });\n            }\n        }\n        // Clear folded ranges that cover the selection head\n        if (tr.selection) {\n            let onSelection = false, { head } = tr.selection.main;\n            folded.between(head, head, (a, b) => { if (a < head && b > head)\n                onSelection = true; });\n            if (onSelection)\n                folded = folded.update({\n                    filterFrom: head,\n                    filterTo: head,\n                    filter: (a, b) => b <= head || a >= head\n                });\n        }\n        return folded;\n    },\n    provide: f => EditorView.decorations.from(f),\n    toJSON(folded, state) {\n        let ranges = [];\n        folded.between(0, state.doc.length, (from, to) => { ranges.push(from, to); });\n        return ranges;\n    },\n    fromJSON(value) {\n        if (!Array.isArray(value) || value.length % 2)\n            throw new RangeError(\"Invalid JSON for fold state\");\n        let ranges = [];\n        for (let i = 0; i < value.length;) {\n            let from = value[i++], to = value[i++];\n            if (typeof from != \"number\" || typeof to != \"number\")\n                throw new RangeError(\"Invalid JSON for fold state\");\n            ranges.push(foldWidget.range(from, to));\n        }\n        return Decoration.set(ranges, true);\n    }\n});\n/**\nGet a [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) containing the folded ranges\nin the given state.\n*/\nfunction foldedRanges(state) {\n    return state.field(foldState, false) || RangeSet.empty;\n}\nfunction findFold(state, from, to) {\n    var _a;\n    let found = null;\n    (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {\n        if (!found || found.from > from)\n            found = { from, to };\n    });\n    return found;\n}\nfunction foldExists(folded, from, to) {\n    let found = false;\n    folded.between(from, from, (a, b) => { if (a == from && b == to)\n        found = true; });\n    return found;\n}\nfunction maybeEnable(state, other) {\n    return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));\n}\n/**\nFold the lines that are selected, if possible.\n*/\nconst foldCode = view => {\n    for (let line of selectedLines(view)) {\n        let range = foldable(view.state, line.from, line.to);\n        if (range) {\n            view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });\n            return true;\n        }\n    }\n    return false;\n};\n/**\nUnfold folded ranges on selected lines.\n*/\nconst unfoldCode = view => {\n    if (!view.state.field(foldState, false))\n        return false;\n    let effects = [];\n    for (let line of selectedLines(view)) {\n        let folded = findFold(view.state, line.from, line.to);\n        if (folded)\n            effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));\n    }\n    if (effects.length)\n        view.dispatch({ effects });\n    return effects.length > 0;\n};\nfunction announceFold(view, range, fold = true) {\n    let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;\n    return EditorView.announce.of(`${view.state.phrase(fold ? \"Folded lines\" : \"Unfolded lines\")} ${lineFrom} ${view.state.phrase(\"to\")} ${lineTo}.`);\n}\n/**\nFold all top-level foldable ranges. Note that, in most cases,\nfolding information will depend on the [syntax\ntree](https://codemirror.net/6/docs/ref/#language.syntaxTree), and folding everything may not work\nreliably when the document hasn't been fully parsed (either\nbecause the editor state was only just initialized, or because the\ndocument is so big that the parser decided not to parse it\nentirely).\n*/\nconst foldAll = view => {\n    let { state } = view, effects = [];\n    for (let pos = 0; pos < state.doc.length;) {\n        let line = view.lineBlockAt(pos), range = foldable(state, line.from, line.to);\n        if (range)\n            effects.push(foldEffect.of(range));\n        pos = (range ? view.lineBlockAt(range.to) : line).to + 1;\n    }\n    if (effects.length)\n        view.dispatch({ effects: maybeEnable(view.state, effects) });\n    return !!effects.length;\n};\n/**\nUnfold all folded code.\n*/\nconst unfoldAll = view => {\n    let field = view.state.field(foldState, false);\n    if (!field || !field.size)\n        return false;\n    let effects = [];\n    field.between(0, view.state.doc.length, (from, to) => { effects.push(unfoldEffect.of({ from, to })); });\n    view.dispatch({ effects });\n    return true;\n};\n// Find the foldable region containing the given line, if one exists\nfunction foldableContainer(view, lineBlock) {\n    // Look backwards through line blocks until we find a foldable region that\n    // intersects with the line\n    for (let line = lineBlock;;) {\n        let foldableRegion = foldable(view.state, line.from, line.to);\n        if (foldableRegion && foldableRegion.to > lineBlock.from)\n            return foldableRegion;\n        if (!line.from)\n            return null;\n        line = view.lineBlockAt(line.from - 1);\n    }\n}\n/**\nToggle folding at cursors. Unfolds if there is an existing fold\nstarting in that line, tries to find a foldable range around it\notherwise.\n*/\nconst toggleFold = (view) => {\n    let effects = [];\n    for (let line of selectedLines(view)) {\n        let folded = findFold(view.state, line.from, line.to);\n        if (folded) {\n            effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));\n        }\n        else {\n            let foldRange = foldableContainer(view, line);\n            if (foldRange)\n                effects.push(foldEffect.of(foldRange), announceFold(view, foldRange));\n        }\n    }\n    if (effects.length > 0)\n        view.dispatch({ effects: maybeEnable(view.state, effects) });\n    return !!effects.length;\n};\n/**\nDefault fold-related key bindings.\n\n - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode).\n - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#language.unfoldCode).\n - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#language.foldAll).\n - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#language.unfoldAll).\n*/\nconst foldKeymap = [\n    { key: \"Ctrl-Shift-[\", mac: \"Cmd-Alt-[\", run: foldCode },\n    { key: \"Ctrl-Shift-]\", mac: \"Cmd-Alt-]\", run: unfoldCode },\n    { key: \"Ctrl-Alt-[\", run: foldAll },\n    { key: \"Ctrl-Alt-]\", run: unfoldAll }\n];\nconst defaultConfig = {\n    placeholderDOM: null,\n    preparePlaceholder: null,\n    placeholderText: \"…\"\n};\nconst foldConfig = /*@__PURE__*/Facet.define({\n    combine(values) { return combineConfig(values, defaultConfig); }\n});\n/**\nCreate an extension that configures code folding.\n*/\nfunction codeFolding(config) {\n    let result = [foldState, baseTheme$1];\n    if (config)\n        result.push(foldConfig.of(config));\n    return result;\n}\nfunction widgetToDOM(view, prepared) {\n    let { state } = view, conf = state.facet(foldConfig);\n    let onclick = (event) => {\n        let line = view.lineBlockAt(view.posAtDOM(event.target));\n        let folded = findFold(view.state, line.from, line.to);\n        if (folded)\n            view.dispatch({ effects: unfoldEffect.of(folded) });\n        event.preventDefault();\n    };\n    if (conf.placeholderDOM)\n        return conf.placeholderDOM(view, onclick, prepared);\n    let element = document.createElement(\"span\");\n    element.textContent = conf.placeholderText;\n    element.setAttribute(\"aria-label\", state.phrase(\"folded code\"));\n    element.title = state.phrase(\"unfold\");\n    element.className = \"cm-foldPlaceholder\";\n    element.onclick = onclick;\n    return element;\n}\nconst foldWidget = /*@__PURE__*/Decoration.replace({ widget: /*@__PURE__*/new class extends WidgetType {\n        toDOM(view) { return widgetToDOM(view, null); }\n    } });\nclass PreparedFoldWidget extends WidgetType {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    eq(other) { return this.value == other.value; }\n    toDOM(view) { return widgetToDOM(view, this.value); }\n}\nconst foldGutterDefaults = {\n    openText: \"⌄\",\n    closedText: \"›\",\n    markerDOM: null,\n    domEventHandlers: {},\n    foldingChanged: () => false\n};\nclass FoldMarker extends GutterMarker {\n    constructor(config, open) {\n        super();\n        this.config = config;\n        this.open = open;\n    }\n    eq(other) { return this.config == other.config && this.open == other.open; }\n    toDOM(view) {\n        if (this.config.markerDOM)\n            return this.config.markerDOM(this.open);\n        let span = document.createElement(\"span\");\n        span.textContent = this.open ? this.config.openText : this.config.closedText;\n        span.title = view.state.phrase(this.open ? \"Fold line\" : \"Unfold line\");\n        return span;\n    }\n}\n/**\nCreate an extension that registers a fold gutter, which shows a\nfold status indicator before foldable lines (which can be clicked\nto fold or unfold the line).\n*/\nfunction foldGutter(config = {}) {\n    let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);\n    let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);\n    let markers = ViewPlugin.fromClass(class {\n        constructor(view) {\n            this.from = view.viewport.from;\n            this.markers = this.buildMarkers(view);\n        }\n        update(update) {\n            if (update.docChanged || update.viewportChanged ||\n                update.startState.facet(language) != update.state.facet(language) ||\n                update.startState.field(foldState, false) != update.state.field(foldState, false) ||\n                syntaxTree(update.startState) != syntaxTree(update.state) ||\n                fullConfig.foldingChanged(update))\n                this.markers = this.buildMarkers(update.view);\n        }\n        buildMarkers(view) {\n            let builder = new RangeSetBuilder();\n            for (let line of view.viewportLineBlocks) {\n                let mark = findFold(view.state, line.from, line.to) ? canUnfold\n                    : foldable(view.state, line.from, line.to) ? canFold : null;\n                if (mark)\n                    builder.add(line.from, line.from, mark);\n            }\n            return builder.finish();\n        }\n    });\n    let { domEventHandlers } = fullConfig;\n    return [\n        markers,\n        gutter({\n            class: \"cm-foldGutter\",\n            markers(view) { var _a; return ((_a = view.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || RangeSet.empty; },\n            initialSpacer() {\n                return new FoldMarker(fullConfig, false);\n            },\n            domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), { click: (view, line, event) => {\n                    if (domEventHandlers.click && domEventHandlers.click(view, line, event))\n                        return true;\n                    let folded = findFold(view.state, line.from, line.to);\n                    if (folded) {\n                        view.dispatch({ effects: unfoldEffect.of(folded) });\n                        return true;\n                    }\n                    let range = foldable(view.state, line.from, line.to);\n                    if (range) {\n                        view.dispatch({ effects: foldEffect.of(range) });\n                        return true;\n                    }\n                    return false;\n                } })\n        }),\n        codeFolding()\n    ];\n}\nconst baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-foldPlaceholder\": {\n        backgroundColor: \"#eee\",\n        border: \"1px solid #ddd\",\n        color: \"#888\",\n        borderRadius: \".2em\",\n        margin: \"0 1px\",\n        padding: \"0 1px\",\n        cursor: \"pointer\"\n    },\n    \".cm-foldGutter span\": {\n        padding: \"0 1px\",\n        cursor: \"pointer\"\n    }\n});\n\n/**\nA highlight style associates CSS styles with higlighting\n[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).\n*/\nclass HighlightStyle {\n    constructor(\n    /**\n    The tag styles used to create this highlight style.\n    */\n    specs, options) {\n        this.specs = specs;\n        let modSpec;\n        function def(spec) {\n            let cls = StyleModule.newName();\n            (modSpec || (modSpec = Object.create(null)))[\".\" + cls] = spec;\n            return cls;\n        }\n        const all = typeof options.all == \"string\" ? options.all : options.all ? def(options.all) : undefined;\n        const scopeOpt = options.scope;\n        this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data\n            : scopeOpt ? (type) => type == scopeOpt : undefined;\n        this.style = tagHighlighter(specs.map(style => ({\n            tag: style.tag,\n            class: style.class || def(Object.assign({}, style, { tag: null }))\n        })), {\n            all,\n        }).style;\n        this.module = modSpec ? new StyleModule(modSpec) : null;\n        this.themeType = options.themeType;\n    }\n    /**\n    Create a highlighter style that associates the given styles to\n    the given tags. The specs must be objects that hold a style tag\n    or array of tags in their `tag` property, and either a single\n    `class` property providing a static CSS class (for highlighter\n    that rely on external styling), or a\n    [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style\n    set of CSS properties (which define the styling for those tags).\n    \n    The CSS rules created for a highlighter will be emitted in the\n    order of the spec's properties. That means that for elements that\n    have multiple tags associated with them, styles defined further\n    down in the list will have a higher CSS precedence than styles\n    defined earlier.\n    */\n    static define(specs, options) {\n        return new HighlightStyle(specs, options || {});\n    }\n}\nconst highlighterFacet = /*@__PURE__*/Facet.define();\nconst fallbackHighlighter = /*@__PURE__*/Facet.define({\n    combine(values) { return values.length ? [values[0]] : null; }\n});\nfunction getHighlighters(state) {\n    let main = state.facet(highlighterFacet);\n    return main.length ? main : state.facet(fallbackHighlighter);\n}\n/**\nWrap a highlighter in an editor extension that uses it to apply\nsyntax highlighting to the editor content.\n\nWhen multiple (non-fallback) styles are provided, the styling\napplied is the union of the classes they emit.\n*/\nfunction syntaxHighlighting(highlighter, options) {\n    let ext = [treeHighlighter], themeType;\n    if (highlighter instanceof HighlightStyle) {\n        if (highlighter.module)\n            ext.push(EditorView.styleModule.of(highlighter.module));\n        themeType = highlighter.themeType;\n    }\n    if (options === null || options === void 0 ? void 0 : options.fallback)\n        ext.push(fallbackHighlighter.of(highlighter));\n    else if (themeType)\n        ext.push(highlighterFacet.computeN([EditorView.darkTheme], state => {\n            return state.facet(EditorView.darkTheme) == (themeType == \"dark\") ? [highlighter] : [];\n        }));\n    else\n        ext.push(highlighterFacet.of(highlighter));\n    return ext;\n}\n/**\nReturns the CSS classes (if any) that the highlighters active in\nthe state would assign to the given style\n[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag) and\n(optional) language\n[scope](https://codemirror.net/6/docs/ref/#language.HighlightStyle^define^options.scope).\n*/\nfunction highlightingFor(state, tags, scope) {\n    let highlighters = getHighlighters(state);\n    let result = null;\n    if (highlighters)\n        for (let highlighter of highlighters) {\n            if (!highlighter.scope || scope && highlighter.scope(scope)) {\n                let cls = highlighter.style(tags);\n                if (cls)\n                    result = result ? result + \" \" + cls : cls;\n            }\n        }\n    return result;\n}\nclass TreeHighlighter {\n    constructor(view) {\n        this.markCache = Object.create(null);\n        this.tree = syntaxTree(view.state);\n        this.decorations = this.buildDeco(view, getHighlighters(view.state));\n        this.decoratedTo = view.viewport.to;\n    }\n    update(update) {\n        let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);\n        let styleChange = highlighters != getHighlighters(update.startState);\n        let { viewport } = update.view, decoratedToMapped = update.changes.mapPos(this.decoratedTo, 1);\n        if (tree.length < viewport.to && !styleChange && tree.type == this.tree.type && decoratedToMapped >= viewport.to) {\n            this.decorations = this.decorations.map(update.changes);\n            this.decoratedTo = decoratedToMapped;\n        }\n        else if (tree != this.tree || update.viewportChanged || styleChange) {\n            this.tree = tree;\n            this.decorations = this.buildDeco(update.view, highlighters);\n            this.decoratedTo = viewport.to;\n        }\n    }\n    buildDeco(view, highlighters) {\n        if (!highlighters || !this.tree.length)\n            return Decoration.none;\n        let builder = new RangeSetBuilder();\n        for (let { from, to } of view.visibleRanges) {\n            highlightTree(this.tree, highlighters, (from, to, style) => {\n                builder.add(from, to, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));\n            }, from, to);\n        }\n        return builder.finish();\n    }\n}\nconst treeHighlighter = /*@__PURE__*/Prec.high(/*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {\n    decorations: v => v.decorations\n}));\n/**\nA default highlight style (works well with light themes).\n*/\nconst defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([\n    { tag: tags.meta,\n        color: \"#404740\" },\n    { tag: tags.link,\n        textDecoration: \"underline\" },\n    { tag: tags.heading,\n        textDecoration: \"underline\",\n        fontWeight: \"bold\" },\n    { tag: tags.emphasis,\n        fontStyle: \"italic\" },\n    { tag: tags.strong,\n        fontWeight: \"bold\" },\n    { tag: tags.strikethrough,\n        textDecoration: \"line-through\" },\n    { tag: tags.keyword,\n        color: \"#708\" },\n    { tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],\n        color: \"#219\" },\n    { tag: [tags.literal, tags.inserted],\n        color: \"#164\" },\n    { tag: [tags.string, tags.deleted],\n        color: \"#a11\" },\n    { tag: [tags.regexp, tags.escape, /*@__PURE__*/tags.special(tags.string)],\n        color: \"#e40\" },\n    { tag: /*@__PURE__*/tags.definition(tags.variableName),\n        color: \"#00f\" },\n    { tag: /*@__PURE__*/tags.local(tags.variableName),\n        color: \"#30a\" },\n    { tag: [tags.typeName, tags.namespace],\n        color: \"#085\" },\n    { tag: tags.className,\n        color: \"#167\" },\n    { tag: [/*@__PURE__*/tags.special(tags.variableName), tags.macroName],\n        color: \"#256\" },\n    { tag: /*@__PURE__*/tags.definition(tags.propertyName),\n        color: \"#00c\" },\n    { tag: tags.comment,\n        color: \"#940\" },\n    { tag: tags.invalid,\n        color: \"#f00\" }\n]);\n\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \"&.cm-focused .cm-matchingBracket\": { backgroundColor: \"#328c8252\" },\n    \"&.cm-focused .cm-nonmatchingBracket\": { backgroundColor: \"#bb555544\" }\n});\nconst DefaultScanDist = 10000, DefaultBrackets = \"()[]{}\";\nconst bracketMatchingConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            afterCursor: true,\n            brackets: DefaultBrackets,\n            maxScanDistance: DefaultScanDist,\n            renderMatch: defaultRenderMatch\n        });\n    }\n});\nconst matchingMark = /*@__PURE__*/Decoration.mark({ class: \"cm-matchingBracket\" }), nonmatchingMark = /*@__PURE__*/Decoration.mark({ class: \"cm-nonmatchingBracket\" });\nfunction defaultRenderMatch(match) {\n    let decorations = [];\n    let mark = match.matched ? matchingMark : nonmatchingMark;\n    decorations.push(mark.range(match.start.from, match.start.to));\n    if (match.end)\n        decorations.push(mark.range(match.end.from, match.end.to));\n    return decorations;\n}\nconst bracketMatchingState = /*@__PURE__*/StateField.define({\n    create() { return Decoration.none; },\n    update(deco, tr) {\n        if (!tr.docChanged && !tr.selection)\n            return deco;\n        let decorations = [];\n        let config = tr.state.facet(bracketMatchingConfig);\n        for (let range of tr.state.selection.ranges) {\n            if (!range.empty)\n                continue;\n            let match = matchBrackets(tr.state, range.head, -1, config)\n                || (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))\n                || (config.afterCursor &&\n                    (matchBrackets(tr.state, range.head, 1, config) ||\n                        (range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));\n            if (match)\n                decorations = decorations.concat(config.renderMatch(match, tr.state));\n        }\n        return Decoration.set(decorations, true);\n    },\n    provide: f => EditorView.decorations.from(f)\n});\nconst bracketMatchingUnique = [\n    bracketMatchingState,\n    baseTheme\n];\n/**\nCreate an extension that enables bracket matching. Whenever the\ncursor is next to a bracket, that bracket and the one it matches\nare highlighted. Or, when no matching bracket is found, another\nhighlighting style is used to indicate this.\n*/\nfunction bracketMatching(config = {}) {\n    return [bracketMatchingConfig.of(config), bracketMatchingUnique];\n}\n/**\nWhen larger syntax nodes, such as HTML tags, are marked as\nopening/closing, it can be a bit messy to treat the whole node as\na matchable bracket. This node prop allows you to define, for such\na node, a ‘handle’—the part of the node that is highlighted, and\nthat the cursor must be on to activate highlighting in the first\nplace.\n*/\nconst bracketMatchingHandle = /*@__PURE__*/new NodeProp();\nfunction matchingNodes(node, dir, brackets) {\n    let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);\n    if (byProp)\n        return byProp;\n    if (node.name.length == 1) {\n        let index = brackets.indexOf(node.name);\n        if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))\n            return [brackets[index + dir]];\n    }\n    return null;\n}\nfunction findHandle(node) {\n    let hasHandle = node.type.prop(bracketMatchingHandle);\n    return hasHandle ? hasHandle(node.node) : node;\n}\n/**\nFind the matching bracket for the token at `pos`, scanning\ndirection `dir`. Only the `brackets` and `maxScanDistance`\nproperties are used from `config`, if given. Returns null if no\nbracket was found at `pos`, or a match result otherwise.\n*/\nfunction matchBrackets(state, pos, dir, config = {}) {\n    let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;\n    let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);\n    for (let cur = node; cur; cur = cur.parent) {\n        let matches = matchingNodes(cur.type, dir, brackets);\n        if (matches && cur.from < cur.to) {\n            let handle = findHandle(cur);\n            if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to))\n                return matchMarkedBrackets(state, pos, dir, cur, handle, matches, brackets);\n        }\n    }\n    return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);\n}\nfunction matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {\n    let parent = token.parent, firstToken = { from: handle.from, to: handle.to };\n    let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();\n    if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))\n        do {\n            if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {\n                if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {\n                    let endHandle = findHandle(cursor);\n                    return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : undefined, matched: true };\n                }\n                else if (matchingNodes(cursor.type, dir, brackets)) {\n                    depth++;\n                }\n                else if (matchingNodes(cursor.type, -dir, brackets)) {\n                    if (depth == 0) {\n                        let endHandle = findHandle(cursor);\n                        return {\n                            start: firstToken,\n                            end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : undefined,\n                            matched: false\n                        };\n                    }\n                    depth--;\n                }\n            }\n        } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());\n    return { start: firstToken, matched: false };\n}\nfunction matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {\n    let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);\n    let bracket = brackets.indexOf(startCh);\n    if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))\n        return null;\n    let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };\n    let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;\n    for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {\n        let text = iter.value;\n        if (dir < 0)\n            distance += text.length;\n        let basePos = pos + distance * dir;\n        for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {\n            let found = brackets.indexOf(text[pos]);\n            if (found < 0 || tree.resolveInner(basePos + pos, 1).type != tokenType)\n                continue;\n            if ((found % 2 == 0) == (dir > 0)) {\n                depth++;\n            }\n            else if (depth == 1) { // Closing\n                return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };\n            }\n            else {\n                depth--;\n            }\n        }\n        if (dir > 0)\n            distance += text.length;\n    }\n    return iter.done ? { start: startToken, matched: false } : null;\n}\n\n// Counts the column offset in a string, taking tabs into account.\n// Used mostly to find indentation.\nfunction countCol(string, end, tabSize, startIndex = 0, startValue = 0) {\n    if (end == null) {\n        end = string.search(/[^\\s\\u00a0]/);\n        if (end == -1)\n            end = string.length;\n    }\n    let n = startValue;\n    for (let i = startIndex; i < end; i++) {\n        if (string.charCodeAt(i) == 9)\n            n += tabSize - (n % tabSize);\n        else\n            n++;\n    }\n    return n;\n}\n/**\nEncapsulates a single line of input. Given to stream syntax code,\nwhich uses it to tokenize the content.\n*/\nclass StringStream {\n    /**\n    Create a stream.\n    */\n    constructor(\n    /**\n    The line.\n    */\n    string, tabSize, \n    /**\n    The current indent unit size.\n    */\n    indentUnit, overrideIndent) {\n        this.string = string;\n        this.tabSize = tabSize;\n        this.indentUnit = indentUnit;\n        this.overrideIndent = overrideIndent;\n        /**\n        The current position on the line.\n        */\n        this.pos = 0;\n        /**\n        The start position of the current token.\n        */\n        this.start = 0;\n        this.lastColumnPos = 0;\n        this.lastColumnValue = 0;\n    }\n    /**\n    True if we are at the end of the line.\n    */\n    eol() { return this.pos >= this.string.length; }\n    /**\n    True if we are at the start of the line.\n    */\n    sol() { return this.pos == 0; }\n    /**\n    Get the next code unit after the current position, or undefined\n    if we're at the end of the line.\n    */\n    peek() { return this.string.charAt(this.pos) || undefined; }\n    /**\n    Read the next code unit and advance `this.pos`.\n    */\n    next() {\n        if (this.pos < this.string.length)\n            return this.string.charAt(this.pos++);\n    }\n    /**\n    Match the next character against the given string, regular\n    expression, or predicate. Consume and return it if it matches.\n    */\n    eat(match) {\n        let ch = this.string.charAt(this.pos);\n        let ok;\n        if (typeof match == \"string\")\n            ok = ch == match;\n        else\n            ok = ch && (match instanceof RegExp ? match.test(ch) : match(ch));\n        if (ok) {\n            ++this.pos;\n            return ch;\n        }\n    }\n    /**\n    Continue matching characters that match the given string,\n    regular expression, or predicate function. Return true if any\n    characters were consumed.\n    */\n    eatWhile(match) {\n        let start = this.pos;\n        while (this.eat(match)) { }\n        return this.pos > start;\n    }\n    /**\n    Consume whitespace ahead of `this.pos`. Return true if any was\n    found.\n    */\n    eatSpace() {\n        let start = this.pos;\n        while (/[\\s\\u00a0]/.test(this.string.charAt(this.pos)))\n            ++this.pos;\n        return this.pos > start;\n    }\n    /**\n    Move to the end of the line.\n    */\n    skipToEnd() { this.pos = this.string.length; }\n    /**\n    Move to directly before the given character, if found on the\n    current line.\n    */\n    skipTo(ch) {\n        let found = this.string.indexOf(ch, this.pos);\n        if (found > -1) {\n            this.pos = found;\n            return true;\n        }\n    }\n    /**\n    Move back `n` characters.\n    */\n    backUp(n) { this.pos -= n; }\n    /**\n    Get the column position at `this.pos`.\n    */\n    column() {\n        if (this.lastColumnPos < this.start) {\n            this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);\n            this.lastColumnPos = this.start;\n        }\n        return this.lastColumnValue;\n    }\n    /**\n    Get the indentation column of the current line.\n    */\n    indentation() {\n        var _a;\n        return (_a = this.overrideIndent) !== null && _a !== void 0 ? _a : countCol(this.string, null, this.tabSize);\n    }\n    /**\n    Match the input against the given string or regular expression\n    (which should start with a `^`). Return true or the regexp match\n    if it matches.\n    \n    Unless `consume` is set to `false`, this will move `this.pos`\n    past the matched text.\n    \n    When matching a string `caseInsensitive` can be set to true to\n    make the match case-insensitive.\n    */\n    match(pattern, consume, caseInsensitive) {\n        if (typeof pattern == \"string\") {\n            let cased = (str) => caseInsensitive ? str.toLowerCase() : str;\n            let substr = this.string.substr(this.pos, pattern.length);\n            if (cased(substr) == cased(pattern)) {\n                if (consume !== false)\n                    this.pos += pattern.length;\n                return true;\n            }\n            else\n                return null;\n        }\n        else {\n            let match = this.string.slice(this.pos).match(pattern);\n            if (match && match.index > 0)\n                return null;\n            if (match && consume !== false)\n                this.pos += match[0].length;\n            return match;\n        }\n    }\n    /**\n    Get the current token.\n    */\n    current() { return this.string.slice(this.start, this.pos); }\n}\n\nfunction fullParser(spec) {\n    return {\n        name: spec.name || \"\",\n        token: spec.token,\n        blankLine: spec.blankLine || (() => { }),\n        startState: spec.startState || (() => true),\n        copyState: spec.copyState || defaultCopyState,\n        indent: spec.indent || (() => null),\n        languageData: spec.languageData || {},\n        tokenTable: spec.tokenTable || noTokens\n    };\n}\nfunction defaultCopyState(state) {\n    if (typeof state != \"object\")\n        return state;\n    let newState = {};\n    for (let prop in state) {\n        let val = state[prop];\n        newState[prop] = (val instanceof Array ? val.slice() : val);\n    }\n    return newState;\n}\nconst IndentedFrom = /*@__PURE__*/new WeakMap();\n/**\nA [language](https://codemirror.net/6/docs/ref/#language.Language) class based on a CodeMirror\n5-style [streaming parser](https://codemirror.net/6/docs/ref/#language.StreamParser).\n*/\nclass StreamLanguage extends Language {\n    constructor(parser) {\n        let data = defineLanguageFacet(parser.languageData);\n        let p = fullParser(parser), self;\n        let impl = new class extends Parser {\n            createParse(input, fragments, ranges) {\n                return new Parse(self, input, fragments, ranges);\n            }\n        };\n        super(data, impl, [indentService.of((cx, pos) => this.getIndent(cx, pos))], parser.name);\n        this.topNode = docID(data);\n        self = this;\n        this.streamParser = p;\n        this.stateAfter = new NodeProp({ perNode: true });\n        this.tokenTable = parser.tokenTable ? new TokenTable(p.tokenTable) : defaultTokenTable;\n    }\n    /**\n    Define a stream language.\n    */\n    static define(spec) { return new StreamLanguage(spec); }\n    getIndent(cx, pos) {\n        let tree = syntaxTree(cx.state), at = tree.resolve(pos);\n        while (at && at.type != this.topNode)\n            at = at.parent;\n        if (!at)\n            return null;\n        let from = undefined;\n        let { overrideIndentation } = cx.options;\n        if (overrideIndentation) {\n            from = IndentedFrom.get(cx.state);\n            if (from != null && from < pos - 1e4)\n                from = undefined;\n        }\n        let start = findState(this, tree, 0, at.from, from !== null && from !== void 0 ? from : pos), statePos, state;\n        if (start) {\n            state = start.state;\n            statePos = start.pos + 1;\n        }\n        else {\n            state = this.streamParser.startState(cx.unit);\n            statePos = 0;\n        }\n        if (pos - statePos > 10000 /* C.MaxIndentScanDist */)\n            return null;\n        while (statePos < pos) {\n            let line = cx.state.doc.lineAt(statePos), end = Math.min(pos, line.to);\n            if (line.length) {\n                let indentation = overrideIndentation ? overrideIndentation(line.from) : -1;\n                let stream = new StringStream(line.text, cx.state.tabSize, cx.unit, indentation < 0 ? undefined : indentation);\n                while (stream.pos < end - line.from)\n                    readToken(this.streamParser.token, stream, state);\n            }\n            else {\n                this.streamParser.blankLine(state, cx.unit);\n            }\n            if (end == pos)\n                break;\n            statePos = line.to + 1;\n        }\n        let line = cx.lineAt(pos);\n        if (overrideIndentation && from == null)\n            IndentedFrom.set(cx.state, line.from);\n        return this.streamParser.indent(state, /^\\s*(.*)/.exec(line.text)[1], cx);\n    }\n    get allowsNesting() { return false; }\n}\nfunction findState(lang, tree, off, startPos, before) {\n    let state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);\n    if (state)\n        return { state: lang.streamParser.copyState(state), pos: off + tree.length };\n    for (let i = tree.children.length - 1; i >= 0; i--) {\n        let child = tree.children[i], pos = off + tree.positions[i];\n        let found = child instanceof Tree && pos < before && findState(lang, child, pos, startPos, before);\n        if (found)\n            return found;\n    }\n    return null;\n}\nfunction cutTree(lang, tree, from, to, inside) {\n    if (inside && from <= 0 && to >= tree.length)\n        return tree;\n    if (!inside && tree.type == lang.topNode)\n        inside = true;\n    for (let i = tree.children.length - 1; i >= 0; i--) {\n        let pos = tree.positions[i], child = tree.children[i], inner;\n        if (pos < to && child instanceof Tree) {\n            if (!(inner = cutTree(lang, child, from - pos, to - pos, inside)))\n                break;\n            return !inside ? inner\n                : new Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);\n        }\n    }\n    return null;\n}\nfunction findStartInFragments(lang, fragments, startPos, editorState) {\n    for (let f of fragments) {\n        let from = f.from + (f.openStart ? 25 : 0), to = f.to - (f.openEnd ? 25 : 0);\n        let found = from <= startPos && to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, to), tree;\n        if (found && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false)))\n            return { state: found.state, tree };\n    }\n    return { state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4), tree: Tree.empty };\n}\nclass Parse {\n    constructor(lang, input, fragments, ranges) {\n        this.lang = lang;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.stoppedAt = null;\n        this.chunks = [];\n        this.chunkPos = [];\n        this.chunk = [];\n        this.chunkReused = undefined;\n        this.rangeIndex = 0;\n        this.to = ranges[ranges.length - 1].to;\n        let context = ParseContext.get(), from = ranges[0].from;\n        let { state, tree } = findStartInFragments(lang, fragments, from, context === null || context === void 0 ? void 0 : context.state);\n        this.state = state;\n        this.parsedPos = this.chunkStart = from + tree.length;\n        for (let i = 0; i < tree.children.length; i++) {\n            this.chunks.push(tree.children[i]);\n            this.chunkPos.push(tree.positions[i]);\n        }\n        if (context && this.parsedPos < context.viewport.from - 100000 /* C.MaxDistanceBeforeViewport */) {\n            this.state = this.lang.streamParser.startState(getIndentUnit(context.state));\n            context.skipUntilInView(this.parsedPos, context.viewport.from);\n            this.parsedPos = context.viewport.from;\n        }\n        this.moveRangeIndex();\n    }\n    advance() {\n        let context = ParseContext.get();\n        let parseEnd = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt);\n        let end = Math.min(parseEnd, this.chunkStart + 2048 /* C.ChunkSize */);\n        if (context)\n            end = Math.min(end, context.viewport.to);\n        while (this.parsedPos < end)\n            this.parseLine(context);\n        if (this.chunkStart < this.parsedPos)\n            this.finishChunk();\n        if (this.parsedPos >= parseEnd)\n            return this.finish();\n        if (context && this.parsedPos >= context.viewport.to) {\n            context.skipUntilInView(this.parsedPos, parseEnd);\n            return this.finish();\n        }\n        return null;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n    }\n    lineAfter(pos) {\n        let chunk = this.input.chunk(pos);\n        if (!this.input.lineChunks) {\n            let eol = chunk.indexOf(\"\\n\");\n            if (eol > -1)\n                chunk = chunk.slice(0, eol);\n        }\n        else if (chunk == \"\\n\") {\n            chunk = \"\";\n        }\n        return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);\n    }\n    nextLine() {\n        let from = this.parsedPos, line = this.lineAfter(from), end = from + line.length;\n        for (let index = this.rangeIndex;;) {\n            let rangeEnd = this.ranges[index].to;\n            if (rangeEnd >= end)\n                break;\n            line = line.slice(0, rangeEnd - (end - line.length));\n            index++;\n            if (index == this.ranges.length)\n                break;\n            let rangeStart = this.ranges[index].from;\n            let after = this.lineAfter(rangeStart);\n            line += after;\n            end = rangeStart + after.length;\n        }\n        return { line, end };\n    }\n    skipGapsTo(pos, offset, side) {\n        for (;;) {\n            let end = this.ranges[this.rangeIndex].to, offPos = pos + offset;\n            if (side > 0 ? end > offPos : end >= offPos)\n                break;\n            let start = this.ranges[++this.rangeIndex].from;\n            offset += start - end;\n        }\n        return offset;\n    }\n    moveRangeIndex() {\n        while (this.ranges[this.rangeIndex].to < this.parsedPos)\n            this.rangeIndex++;\n    }\n    emitToken(id, from, to, size, offset) {\n        if (this.ranges.length > 1) {\n            offset = this.skipGapsTo(from, offset, 1);\n            from += offset;\n            let len0 = this.chunk.length;\n            offset = this.skipGapsTo(to, offset, -1);\n            to += offset;\n            size += this.chunk.length - len0;\n        }\n        this.chunk.push(id, from, to, size);\n        return offset;\n    }\n    parseLine(context) {\n        let { line, end } = this.nextLine(), offset = 0, { streamParser } = this.lang;\n        let stream = new StringStream(line, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);\n        if (stream.eol()) {\n            streamParser.blankLine(this.state, stream.indentUnit);\n        }\n        else {\n            while (!stream.eol()) {\n                let token = readToken(streamParser.token, stream, this.state);\n                if (token)\n                    offset = this.emitToken(this.lang.tokenTable.resolve(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, 4, offset);\n                if (stream.start > 10000 /* C.MaxLineLength */)\n                    break;\n            }\n        }\n        this.parsedPos = end;\n        this.moveRangeIndex();\n        if (this.parsedPos < this.to)\n            this.parsedPos++;\n    }\n    finishChunk() {\n        let tree = Tree.build({\n            buffer: this.chunk,\n            start: this.chunkStart,\n            length: this.parsedPos - this.chunkStart,\n            nodeSet,\n            topID: 0,\n            maxBufferLength: 2048 /* C.ChunkSize */,\n            reused: this.chunkReused\n        });\n        tree = new Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);\n        this.chunks.push(tree);\n        this.chunkPos.push(this.chunkStart - this.ranges[0].from);\n        this.chunk = [];\n        this.chunkReused = undefined;\n        this.chunkStart = this.parsedPos;\n    }\n    finish() {\n        return new Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();\n    }\n}\nfunction readToken(token, stream, state) {\n    stream.start = stream.pos;\n    for (let i = 0; i < 10; i++) {\n        let result = token(stream, state);\n        if (stream.pos > stream.start)\n            return result;\n    }\n    throw new Error(\"Stream parser failed to advance stream.\");\n}\nconst noTokens = /*@__PURE__*/Object.create(null);\nconst typeArray = [NodeType.none];\nconst nodeSet = /*@__PURE__*/new NodeSet(typeArray);\nconst warned = [];\n// Cache of node types by name and tags\nconst byTag = /*@__PURE__*/Object.create(null);\nconst defaultTable = /*@__PURE__*/Object.create(null);\nfor (let [legacyName, name] of [\n    [\"variable\", \"variableName\"],\n    [\"variable-2\", \"variableName.special\"],\n    [\"string-2\", \"string.special\"],\n    [\"def\", \"variableName.definition\"],\n    [\"tag\", \"tagName\"],\n    [\"attribute\", \"attributeName\"],\n    [\"type\", \"typeName\"],\n    [\"builtin\", \"variableName.standard\"],\n    [\"qualifier\", \"modifier\"],\n    [\"error\", \"invalid\"],\n    [\"header\", \"heading\"],\n    [\"property\", \"propertyName\"]\n])\n    defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);\nclass TokenTable {\n    constructor(extra) {\n        this.extra = extra;\n        this.table = Object.assign(Object.create(null), defaultTable);\n    }\n    resolve(tag) {\n        return !tag ? 0 : this.table[tag] || (this.table[tag] = createTokenType(this.extra, tag));\n    }\n}\nconst defaultTokenTable = /*@__PURE__*/new TokenTable(noTokens);\nfunction warnForPart(part, msg) {\n    if (warned.indexOf(part) > -1)\n        return;\n    warned.push(part);\n    console.warn(msg);\n}\nfunction createTokenType(extra, tagStr) {\n    let tags$1 = [];\n    for (let name of tagStr.split(\" \")) {\n        let found = [];\n        for (let part of name.split(\".\")) {\n            let value = (extra[part] || tags[part]);\n            if (!value) {\n                warnForPart(part, `Unknown highlighting tag ${part}`);\n            }\n            else if (typeof value == \"function\") {\n                if (!found.length)\n                    warnForPart(part, `Modifier ${part} used at start of tag`);\n                else\n                    found = found.map(value);\n            }\n            else {\n                if (found.length)\n                    warnForPart(part, `Tag ${part} used as modifier`);\n                else\n                    found = Array.isArray(value) ? value : [value];\n            }\n        }\n        for (let tag of found)\n            tags$1.push(tag);\n    }\n    if (!tags$1.length)\n        return 0;\n    let name = tagStr.replace(/ /g, \"_\"), key = name + \" \" + tags$1.map(t => t.id);\n    let known = byTag[key];\n    if (known)\n        return known.id;\n    let type = byTag[key] = NodeType.define({\n        id: typeArray.length,\n        name,\n        props: [styleTags({ [name]: tags$1 })]\n    });\n    typeArray.push(type);\n    return type.id;\n}\nfunction docID(data) {\n    let type = NodeType.define({ id: typeArray.length, name: \"Document\", props: [languageDataProp.add(() => data)], top: true });\n    typeArray.push(type);\n    return type;\n}\n\nfunction buildForLine(line) {\n    return line.length <= 4096 && /[\\u0590-\\u05f4\\u0600-\\u06ff\\u0700-\\u08ac\\ufb50-\\ufdff]/.test(line);\n}\nfunction textHasRTL(text) {\n    for (let i = text.iter(); !i.next().done;)\n        if (buildForLine(i.value))\n            return true;\n    return false;\n}\nfunction changeAddsRTL(change) {\n    let added = false;\n    change.iterChanges((fA, tA, fB, tB, ins) => {\n        if (!added && textHasRTL(ins))\n            added = true;\n    });\n    return added;\n}\nconst alwaysIsolate = /*@__PURE__*/Facet.define({ combine: values => values.some(x => x) });\n/**\nMake sure nodes\n[marked](https://lezer.codemirror.net/docs/ref/#common.NodeProp^isolate)\nas isolating for bidirectional text are rendered in a way that\nisolates them from the surrounding text.\n*/\nfunction bidiIsolates(options = {}) {\n    let extensions = [isolateMarks];\n    if (options.alwaysIsolate)\n        extensions.push(alwaysIsolate.of(true));\n    return extensions;\n}\nconst isolateMarks = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.always = view.state.facet(alwaysIsolate) ||\n            view.textDirection != Direction.LTR ||\n            view.state.facet(EditorView.perLineTextDirection);\n        this.hasRTL = !this.always && textHasRTL(view.state.doc);\n        this.tree = syntaxTree(view.state);\n        this.decorations = this.always || this.hasRTL ? buildDeco(view, this.tree, this.always) : Decoration.none;\n    }\n    update(update) {\n        let always = update.state.facet(alwaysIsolate) ||\n            update.view.textDirection != Direction.LTR ||\n            update.state.facet(EditorView.perLineTextDirection);\n        if (!always && !this.hasRTL && changeAddsRTL(update.changes))\n            this.hasRTL = true;\n        if (!always && !this.hasRTL)\n            return;\n        let tree = syntaxTree(update.state);\n        if (always != this.always || tree != this.tree || update.docChanged || update.viewportChanged) {\n            this.tree = tree;\n            this.always = always;\n            this.decorations = buildDeco(update.view, tree, always);\n        }\n    }\n}, {\n    provide: plugin => {\n        function access(view) {\n            var _a, _b;\n            return (_b = (_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.decorations) !== null && _b !== void 0 ? _b : Decoration.none;\n        }\n        return [EditorView.outerDecorations.of(access),\n            Prec.lowest(EditorView.bidiIsolatedRanges.of(access))];\n    }\n});\nfunction buildDeco(view, tree, always) {\n    let deco = new RangeSetBuilder();\n    let ranges = view.visibleRanges;\n    if (!always)\n        ranges = clipRTLLines(ranges, view.state.doc);\n    for (let { from, to } of ranges) {\n        tree.iterate({\n            enter: node => {\n                let iso = node.type.prop(NodeProp.isolate);\n                if (iso)\n                    deco.add(node.from, node.to, marks[iso]);\n            },\n            from, to\n        });\n    }\n    return deco.finish();\n}\nfunction clipRTLLines(ranges, doc) {\n    let cur = doc.iter(), pos = 0, result = [], last = null;\n    for (let { from, to } of ranges) {\n        if (from != pos) {\n            if (pos < from)\n                cur.next(from - pos);\n            pos = from;\n        }\n        for (;;) {\n            let start = pos, end = pos + cur.value.length;\n            if (!cur.lineBreak && buildForLine(cur.value)) {\n                if (last && last.to > start - 10)\n                    last.to = Math.min(to, end);\n                else\n                    result.push(last = { from: start, to: Math.min(to, end) });\n            }\n            if (pos >= to)\n                break;\n            pos = end;\n            cur.next();\n        }\n    }\n    return result;\n}\nconst marks = {\n    rtl: /*@__PURE__*/Decoration.mark({ class: \"cm-iso\", inclusive: true, attributes: { dir: \"rtl\" }, bidiIsolate: Direction.RTL }),\n    ltr: /*@__PURE__*/Decoration.mark({ class: \"cm-iso\", inclusive: true, attributes: { dir: \"ltr\" }, bidiIsolate: Direction.LTR }),\n    auto: /*@__PURE__*/Decoration.mark({ class: \"cm-iso\", inclusive: true, attributes: { dir: \"auto\" }, bidiIsolate: null })\n};\n\nexport { DocInput, HighlightStyle, IndentContext, LRLanguage, Language, LanguageDescription, LanguageSupport, ParseContext, StreamLanguage, StringStream, TreeIndentContext, bidiIsolates, bracketMatching, bracketMatchingHandle, codeFolding, continuedIndent, defaultHighlightStyle, defineLanguageFacet, delimitedIndent, ensureSyntaxTree, flatIndent, foldAll, foldCode, foldEffect, foldGutter, foldInside, foldKeymap, foldNodeProp, foldService, foldState, foldable, foldedRanges, forceParsing, getIndentUnit, getIndentation, highlightingFor, indentNodeProp, indentOnInput, indentRange, indentService, indentString, indentUnit, language, languageDataProp, matchBrackets, sublanguageProp, syntaxHighlighting, syntaxParserRunning, syntaxTree, syntaxTreeAvailable, toggleFold, unfoldAll, unfoldCode, unfoldEffect };\n"],"names":["DefaultBufferLength","nextPropID","Range","constructor","from","to","this","NodeProp","config","id","perNode","deserialize","Error","add","match","RangeError","NodeType","type","result","undefined","closedBy","str","split","openedBy","group","isolate","value","contextHash","lookAhead","mounted","MountedTree","tree","overlay","parser","get","props","noProps","Object","create","name","flags","define","spec","length","top","skipped","error","src","Array","isArray","prop","isTop","isSkipped","isError","isAnonymous","is","indexOf","map","direct","node","groups","i","found","none","NodeSet","types","extend","newTypes","newProps","source","assign","push","CachedNode","WeakMap","CachedInnerNode","IterMode","Tree","children","positions","toString","ch","test","JSON","stringify","cursor","mode","TreeCursor","topNode","cursorAt","pos","side","scope","moveTo","set","_tree","TreeNode","resolve","resolveNode","resolveInner","resolveStack","inner","layers","scan","context","parent","index","mount","root","iterStack","stackIterator","iterate","enter","leave","anon","IncludeAnonymous","c","entered","firstChild","nextSibling","propValues","balance","balanceRange","makeTree","build","data","_a","buffer","nodeSet","maxBufferLength","reused","minRepeatType","FlatBufferCursor","takeNode","parentStart","minPos","inRepeat","depth","start","end","size","lookAheadAtStart","next","startPos","findBufferSize","Uint16Array","skip","endPos","copyToBuffer","TreeBuffer","localChildren","localPositions","localInRepeat","lastGroup","lastEnd","makeRepeatLeaf","takeFlatNode","reverse","make","makeBalanced","nodes","nodeCount","stopAt","j","last","lookAheadProp","lastI","base","pop","pair","concat","maxSize","fork","minStart","nodeSize","localSkipped","nodeStart","bufferStart","startIndex","topID","buildTree","empty","childString","join","endIndex","findChild","dir","pick","checkSide","slice","startI","endI","b","copy","len","Math","max","overlays","IgnoreOverlays","BaseNode","getChild","before","after","r","getChildren","matchContext","matchNodeContext","enterUnfinishedNodesBefore","childBefore","lastChild","prevSibling","_parent","super","nextChild","e","ExcludeBuffers","BufferNode","BufferContext","hasChild","IgnoreMounts","childAfter","rPos","nextSignificantParent","val","toTree","cur","p","child","externalSibling","heads","picked","newHeads","splice","StackIterator","stack","bufferNode","yieldNode","n","unshift","yieldBuf","yield","enterChild","sibling","d","atLastNode","move","prev","cache","mustLeave","some","nodeSizeCache","balanceType","mkTop","mkTree","total","maxChild","ceil","divide","offset","groupFrom","groupStart","groupSize","nextSize","only","NodeWeakMap","setBuffer","Map","getBuffer","cursorSet","cursorGet","TreeFragment","openStart","openEnd","open","addTree","fragments","partial","f","applyChanges","changes","minGap","fI","nextF","cI","off","nextC","nextPos","fromA","cut","fFrom","fTo","min","toA","toB","Parser","startParse","input","ranges","StringInput","createParse","parse","done","advance","string","chunk","lineChunks","read","nextTagID","Tag","modified","tag","t","defineModifier","mod","Modifier","sort","a","nextModifierID","instances","mods","exists","find","every","x","m","configs","array","sets","powerSet","styleTags","byName","tags","part","pieces","rest","exec","rule","Rule","ruleNodeProp","opaque","inherit","other","tagHighlighter","options","style","class","all","cls","sub","tagClass","highlightTree","highlighter","putStyle","builder","HighlightBuilder","highlightRange","highlighters","flush","at","span","startSpan","inheritedClass","filter","h","getStyleTags","tagCls","highlightTags","innerHighlighters","rangeFrom","rangeTo","comment","typeName","propertyName","literal","number","content","heading","keyword","operator","punctuation","bracket","meta","lineComment","blockComment","docComment","variableName","tagName","attributeName","className","labelName","namespace","macroName","docString","character","attributeValue","integer","float","bool","regexp","escape","color","url","self","null","atom","unit","modifier","operatorKeyword","controlKeyword","definitionKeyword","moduleKeyword","derefOperator","arithmeticOperator","logicOperator","bitwiseOperator","compareOperator","updateOperator","definitionOperator","typeOperator","controlOperator","separator","angleBracket","squareBracket","paren","brace","heading1","heading2","heading3","heading4","heading5","heading6","contentSeparator","list","quote","emphasis","strong","link","monospace","strikethrough","inserted","deleted","changed","invalid","documentMeta","annotation","processingInstruction","definition","constant","function","standard","local","special","languageDataProp","defineLanguageFacet","baseData","Facet","combine","values","sublanguageProp","Language","extraExtensions","EditorState","prototype","hasOwnProperty","defineProperty","syntaxTree","extension","language","of","languageData","state","topNodeAt","facet","innerNode","sublang","isActiveAt","findRegions","lang","doc","allowsNesting","explore","topLang","setState","StateEffect","LRLanguage","configure","hasWrappers","field","ensureSyntaxTree","upto","timeout","oldVieport","viewport","updateViewport","isDone","work","DocInput","cursorPos","iter","syncTo","stringStart","sliceString","currentContext","ParseContext","treeLen","scheduleOn","tempSkipped","until","takeTree","withContext","endTime","Date","now","stoppedAt","withoutTempSkipped","parsedPos","cutFragments","newState","iterChangedRanges","fromB","mapPos","startLen","reset","skipUntilInView","getSkippingParser","cx","Promise","frags","LanguageState","apply","tr","docChanged","newCx","startState","init","vpTo","parseState","StateField","update","effects","requestIdle","callback","setTimeout","clearTimeout","requestIdleCallback","idle","cancelIdleCallback","isInputPending","navigator","scheduling","parseWorker","ViewPlugin","fromClass","view","working","workScheduled","chunkEnd","chunkBudget","bind","scheduleWork","selectionSet","hasFocus","checkAsyncSchedule","deadline","timeRemaining","viewportFirst","dispatch","then","catch","err","logException","destroy","isWorking","eventHandlers","focus","languages","enables","EditorView","contentAttributes","compute","LanguageSupport","support","LanguageDescription","alias","extensions","filename","loadFunc","loading","load","s","toLowerCase","matchFilename","descs","ext","matchLanguageName","fuzzy","indentService","indentUnit","getIndentUnit","charCodeAt","tabSize","indentString","cols","ts","getIndentation","IndentContext","service","ast","indentFor","syntaxIndentation","lineAt","bias","line","simulateBreak","simulateDoubleBreak","text","textAfterPos","column","countColumn","override","overrideIndentation","search","lineIndent","overriden","simulatedBreak","indentNodeProp","strategy","indentStrategy","TreeIndentContext","close","first","closed","delimitedStrategy","ignoreClosed","topIndent","textAfter","baseIndent","baseIndentFor","atBreak","isParent","delimitedIndent","closing","align","units","closedAt","space","aligned","openToken","sim","openLine","lineEnd","bracketedAligned","indentOnInput","transactionFilter","isUserEvent","rules","languageDataAt","selection","main","head","newDoc","newSelection","lineStart","indent","norm","insert","sequential","foldService","foldNodeProp","foldInside","isUnfinished","foldable","syntaxFolding","mapRange","range","mapping","foldEffect","unfoldEffect","selectedLines","lines","l","lineBlockAt","foldState","Decoration","folded","foldExists","preparePlaceholder","foldConfig","widget","replace","PreparedFoldWidget","foldWidget","filterFrom","filterTo","onSelection","between","provide","decorations","toJSON","fromJSON","findFold","maybeEnable","appendConfig","codeFolding","foldCode","announceFold","unfoldCode","fold","lineFrom","lineTo","announce","phrase","foldAll","unfoldAll","foldableContainer","lineBlock","foldableRegion","foldKeymap","key","mac","run","defaultConfig","placeholderDOM","placeholderText","combineConfig","baseTheme$1","widgetToDOM","prepared","conf","onclick","event","posAtDOM","target","preventDefault","element","document","createElement","textContent","setAttribute","title","WidgetType","toDOM","eq","foldGutterDefaults","openText","closedText","markerDOM","domEventHandlers","foldingChanged","FoldMarker","GutterMarker","foldGutter","fullConfig","canFold","canUnfold","markers","buildMarkers","viewportChanged","RangeSetBuilder","viewportLineBlocks","mark","finish","gutter","plugin","RangeSet","initialSpacer","click","baseTheme","backgroundColor","border","borderRadius","margin","padding","HighlightStyle","specs","modSpec","def","StyleModule","newName","scopeOpt","module","themeType","highlighterFacet","fallbackHighlighter","getHighlighters","syntaxHighlighting","treeHighlighter","styleModule","fallback","computeN","darkTheme","TreeHighlighter","markCache","buildDeco","decoratedTo","styleChange","decoratedToMapped","visibleRanges","Prec","high","v","defaultHighlightStyle","textDecoration","fontWeight","fontStyle","DefaultBrackets","bracketMatchingConfig","afterCursor","brackets","maxScanDistance","renderMatch","defaultRenderMatch","matchingMark","nonmatchingMark","matched","bracketMatchingUnique","deco","matchBrackets","bracketMatching","bracketMatchingHandle","matchingNodes","byProp","findHandle","hasHandle","matches","handle","matchMarkedBrackets","tokenType","startCh","sliceDoc","startToken","iterRange","distance","basePos","matchPlainBrackets","_state","_pos","token","matching","firstToken","endHandle","countCol","startValue","StringStream","overrideIndent","lastColumnPos","lastColumnValue","eol","sol","peek","charAt","eat","ok","RegExp","eatWhile","eatSpace","skipToEnd","skipTo","backUp","indentation","pattern","consume","caseInsensitive","cased","substr","current","defaultCopyState","IndentedFrom","StreamLanguage","blankLine","copyState","tokenTable","noTokens","Parse","getIndent","typeArray","docID","streamParser","stateAfter","TokenTable","defaultTokenTable","statePos","findState","stream","readToken","cutTree","inside","chunks","chunkPos","chunkReused","rangeIndex","editorState","findStartInFragments","chunkStart","moveRangeIndex","parseEnd","parseLine","finishChunk","lineAfter","nextLine","rangeEnd","rangeStart","skipGapsTo","offPos","emitToken","len0","warned","byTag","defaultTable","legacyName","createTokenType","extra","table","warnForPart","msg","console","warn","tagStr","tags$1","known","buildForLine","textHasRTL","alwaysIsolate","isolateMarks","always","textDirection","Direction","LTR","perLineTextDirection","hasRTL","change","added","iterChanges","fA","tA","fB","tB","ins","changeAddsRTL","access","_b","outerDecorations","lowest","bidiIsolatedRanges","lineBreak","clipRTLLines","iso","marks","rtl","inclusive","attributes","bidiIsolate","RTL","ltr","auto","except","matchExcept","success","updated","foldRange"],"mappings":"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","x_google_ignoreList":[0,1,2]}